/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(function ($, _ref) {
  var ajax = _ref.ajax,
      behaviors = _ref.behaviors;

  function getComponentRegion(component) {
    return component.closest('[data-region]');
  }

  function getSiblingByDirection(element, direction, selector) {
    if (direction === 'previous') {
      return element.prevAll(selector).first();
    }
    return element.nextAll(selector).first();
  }

  function findMoveToRegion(element, direction) {
    var elementRegion = getComponentRegion(element);
    var moveToRegion = getSiblingByDirection(elementRegion, direction, '[data-region]');
    if (moveToRegion.length === 0) {
      var componentSection = elementRegion.closest('.layout-section');
      var moveToSection = getSiblingByDirection(componentSection, direction, '.layout-section');
      if (moveToSection.length === 0) {
        return null;
      }
      var sectionRegions = moveToSection.find('[data-region]');
      return direction === 'previous' ? sectionRegions.last() : sectionRegions.first();
    } else {
      return moveToRegion;
    }
  }

  function findRegionMoveToElement(region, element, direction) {
    var moveToElement = void 0;
    if (region[0] === getComponentRegion(element)[0]) {
      if (direction === 'previous') {
        moveToElement = element.prev('[data-layout-block-uuid]');
      } else {
        moveToElement = element.next('[data-layout-block-uuid], .new-block').next('[data-layout-block-uuid], .new-block');
      }
      if (moveToElement.length === 0) {
        var moveToRegion = findMoveToRegion(element, direction);
        if (moveToRegion) {
          return findRegionMoveToElement(moveToRegion, element, direction);
        } else {
          return null;
        }
      }
    } else {
      if (direction === 'next') {
        moveToElement = region.children('[data-layout-block-uuid], .new-block').first();
      } else {
        moveToElement = region.find('.new-block');
      }
    }

    return moveToElement.length === 0 ? null : moveToElement;
  }
  function moveComponent(element, direction) {

    element.css('background-color', 'lightblue');
    var moveToElement = findRegionMoveToElement(getComponentRegion(element), element, direction);
    if (moveToElement) {
      moveToElement.before(element);
    }
  }

  behaviors.layoutBuilder = {
    attach: function attach(context) {
      $(context).find('.layout-builder--layout__region').sortable({
        items: '> .draggable',
        connectWith: '.layout-builder--layout__region',
        placeholder: 'ui-state-drop',

        update: function update(event, ui) {
          var itemRegion = ui.item.closest('.layout-builder--layout__region');
          if (event.target === itemRegion[0]) {
            var deltaTo = ui.item.closest('[data-layout-delta]').data('layout-delta');

            var deltaFrom = ui.sender ? ui.sender.closest('[data-layout-delta]').data('layout-delta') : deltaTo;
            ajax({
              url: [ui.item.closest('[data-layout-update-url]').data('layout-update-url'), deltaFrom, deltaTo, itemRegion.data('region'), ui.item.data('layout-block-uuid'), ui.item.prev('[data-layout-block-uuid]').data('layout-block-uuid')].filter(function (element) {
                return element !== undefined;
              }).join('/')
            }).execute();
          }
        }
      });
      $(context).find('[data-layout-builder-reorder] [data-layout-builder-reorder-direction]').on('click', function (e) {
        var direction = $(e.target).attr('data-layout-builder-reorder-direction');
        var component = $(e.target).closest('[data-layout-block-uuid]');

        moveComponent(component, direction);
        $(e.target).focus();

        e.preventDefault();
      });
    }
  };
})(jQuery, Drupal);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxheW91dC1idWlsZGVyLmVzNi5qcyJdLCJuYW1lcyI6WyIkIiwiYWpheCIsImJlaGF2aW9ycyIsImdldENvbXBvbmVudFJlZ2lvbiIsImNvbXBvbmVudCIsImNsb3Nlc3QiLCJnZXRTaWJsaW5nQnlEaXJlY3Rpb24iLCJlbGVtZW50IiwiZGlyZWN0aW9uIiwic2VsZWN0b3IiLCJwcmV2QWxsIiwiZmlyc3QiLCJuZXh0QWxsIiwiZmluZE1vdmVUb1JlZ2lvbiIsImVsZW1lbnRSZWdpb24iLCJtb3ZlVG9SZWdpb24iLCJsZW5ndGgiLCJjb21wb25lbnRTZWN0aW9uIiwibW92ZVRvU2VjdGlvbiIsInNlY3Rpb25SZWdpb25zIiwiZmluZCIsImxhc3QiLCJmaW5kUmVnaW9uTW92ZVRvRWxlbWVudCIsInJlZ2lvbiIsIm1vdmVUb0VsZW1lbnQiLCJwcmV2IiwibmV4dCIsImNoaWxkcmVuIiwibW92ZUNvbXBvbmVudCIsImNzcyIsImJlZm9yZSIsImxheW91dEJ1aWxkZXIiLCJhdHRhY2giLCJjb250ZXh0Iiwic29ydGFibGUiLCJpdGVtcyIsImNvbm5lY3RXaXRoIiwicGxhY2Vob2xkZXIiLCJ1cGRhdGUiLCJldmVudCIsInVpIiwiaXRlbVJlZ2lvbiIsIml0ZW0iLCJ0YXJnZXQiLCJkZWx0YVRvIiwiZGF0YSIsImRlbHRhRnJvbSIsInNlbmRlciIsInVybCIsImZpbHRlciIsInVuZGVmaW5lZCIsImpvaW4iLCJleGVjdXRlIiwib24iLCJlIiwiYXR0ciIsImZvY3VzIiwicHJldmVudERlZmF1bHQiLCJqUXVlcnkiLCJEcnVwYWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxDQUFDLFVBQUNBLENBQUQsUUFBNEI7QUFBQSxNQUF0QkMsSUFBc0IsUUFBdEJBLElBQXNCO0FBQUEsTUFBaEJDLFNBQWdCLFFBQWhCQSxTQUFnQjs7QUFTM0IsV0FBU0Msa0JBQVQsQ0FBNEJDLFNBQTVCLEVBQXVDO0FBQ3JDLFdBQU9BLFVBQVVDLE9BQVYsQ0FBa0IsZUFBbEIsQ0FB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NUYsRUFBcUcsYUFBSztBQUN4RyxZQUFNN0MsWUFBWVIsRUFBRXNELEVBQUVYLE1BQUosRUFBWVksSUFBWixDQUFpQix1Q0FBakIsQ0FBbEI7QUFDQSxZQUFNbkQsWUFBWUosRUFBRXNELEVBQUVYLE1BQUosRUFBWXRDLE9BQVosQ0FBb0IsMEJBQXBCLENBQWxCOztBQUVBdUIsc0JBQWN4QixTQUFkLEVBQXlCSSxTQUF6QjtBQUNBUixVQUFFc0QsRUFBRVgsTUFBSixFQUFZYSxLQUFaOztBQUVBRixVQUFFRyxjQUFGO0FBQ0QsT0FSRDtBQVNEO0FBM0R1QixHQUExQjtBQTZERCxDQXBLRCxFQW9LR0MsTUFwS0gsRUFvS1dDLE1BcEtYIiwiZmlsZSI6ImxheW91dC1idWlsZGVyLmVzNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIigoJCwgeyBhamF4LCBiZWhhdmlvcnMgfSkgPT4ge1xuICAvKipcbiAgICogR2V0cyB0aGUgcmVnaW9uIGZvciBhIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtqUXVlcnl9IGNvbXBvbmVudFxuICAgKiAgIFRoZSBjb21wb25lbnQuXG4gICAqIEByZXR1cm4ge2pRdWVyeX1cbiAgICogICBUaGUgY29tcG9uZW50cyByZWdpb24gZWxlbWVudC5cbiAgICovXG4gIGZ1bmN0aW9uIGdldENvbXBvbmVudFJlZ2lvbihjb21wb25lbnQpIHtcbiAgICByZXR1cm4gY29tcG9uZW50LmNsb3Nlc3QoJ1tkYXRhLXJlZ2lvbl0nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBuZXh0IG1hdGNoaW5nIHNpYmxpbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50XG4gICAqICAgVGhlIGVsZW1lbnQgdG8gZ2V0IHRoZSBzaWJsaW5nIGZvci5cbiAgICogQHBhcmFtIGRpcmVjdGlvblxuICAgKiBAcGFyYW0gc2VsZWN0b3JcbiAgICogQHJldHVybiB7alF1ZXJ5fVxuICAgKiAgIFRoZSBzaWJsaW5nIHRoYXQgbWF0Y2ggdGhlIHNlbGVjdG9yLlxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0U2libGluZ0J5RGlyZWN0aW9uKGVsZW1lbnQsIGRpcmVjdGlvbiwgc2VsZWN0b3IpIHtcbiAgICBpZiAoZGlyZWN0aW9uID09PSAncHJldmlvdXMnKSB7XG4gICAgICByZXR1cm4gZWxlbWVudC5wcmV2QWxsKHNlbGVjdG9yKS5maXJzdCgpO1xuICAgIH1cbiAgICByZXR1cm4gZWxlbWVudC5uZXh0QWxsKHNlbGVjdG9yKS5maXJzdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmRzIHRoZSByZWdpb24gdG8gbW92ZSB0by5cbiAgICpcbiAgICogQHBhcmFtIGVsZW1lbnRcbiAgICogQHBhcmFtIGRpcmVjdGlvblxuICAgKiBAcmV0dXJucyB7Kn1cbiAgICovXG4gIGZ1bmN0aW9uIGZpbmRNb3ZlVG9SZWdpb24oZWxlbWVudCwgZGlyZWN0aW9uKSB7XG4gICAgY29uc3QgZWxlbWVudFJlZ2lvbiA9IGdldENvbXBvbmVudFJlZ2lvbihlbGVtZW50KTtcbiAgICBjb25zdCBtb3ZlVG9SZWdpb24gPSBnZXRTaWJsaW5nQnlEaXJlY3Rpb24oZWxlbWVudFJlZ2lvbiwgZGlyZWN0aW9uLCAnW2RhdGEtcmVnaW9uXScpO1xuICAgIGlmIChtb3ZlVG9SZWdpb24ubGVuZ3RoID09PSAwKSB7XG4gICAgICBjb25zdCBjb21wb25lbnRTZWN0aW9uID0gZWxlbWVudFJlZ2lvbi5jbG9zZXN0KCcubGF5b3V0LXNlY3Rpb24nKTtcbiAgICAgIGNvbnN0IG1vdmVUb1NlY3Rpb24gPSBnZXRTaWJsaW5nQnlEaXJlY3Rpb24oY29tcG9uZW50U2VjdGlvbiwgZGlyZWN0aW9uLCAnLmxheW91dC1zZWN0aW9uJyk7XG4gICAgICBpZiAobW92ZVRvU2VjdGlvbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBjb25zdCBzZWN0aW9uUmVnaW9ucyA9IG1vdmVUb1NlY3Rpb24uZmluZCgnW2RhdGEtcmVnaW9uXScpO1xuICAgICAgcmV0dXJuIGRpcmVjdGlvbiA9PT0gJ3ByZXZpb3VzJyA/IHNlY3Rpb25SZWdpb25zLmxhc3QoKSA6IHNlY3Rpb25SZWdpb25zLmZpcnN0KCk7XG4gICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiBtb3ZlVG9SZWdpb247XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZpbmRzIHRoZSBlbGVtZW50cyB0aGUgZWxlbWVudCB0aGUgY3VycmVudCBlbGVtZW50IHNob3VsZCBtb3ZlIHRvLlxuICAgKlxuICAgKiBAcGFyYW0gcmVnaW9uXG4gICAqIEBwYXJhbSBlbGVtZW50XG4gICAqIEBwYXJhbSBkaXJlY3Rpb25cbiAgICogQHJldHVybnMge251bGx9XG4gICAqL1xuICBmdW5jdGlvbiBmaW5kUmVnaW9uTW92ZVRvRWxlbWVudChyZWdpb24sIGVsZW1lbnQsIGRpcmVjdGlvbikge1xuICAgIGxldCBtb3ZlVG9FbGVtZW50O1xuICAgIGlmIChyZWdpb25bMF0gPT09IGdldENvbXBvbmVudFJlZ2lvbihlbGVtZW50KVswXSkge1xuICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3ByZXZpb3VzJykge1xuICAgICAgICBtb3ZlVG9FbGVtZW50ID0gZWxlbWVudC5wcmV2KCdbZGF0YS1sYXlvdXQtYmxvY2stdXVpZF0nKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBtb3ZlVG9FbGVtZW50ID0gZWxlbWVudC5uZXh0KCdbZGF0YS1sYXlvdXQtYmxvY2stdXVpZF0sIC5uZXctYmxvY2snKS5uZXh0KCdbZGF0YS1sYXlvdXQtYmxvY2stdXVpZF0sIC5uZXctYmxvY2snKTtcbiAgICAgIH1cbiAgICAgIGlmIChtb3ZlVG9FbGVtZW50Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjb25zdCBtb3ZlVG9SZWdpb24gPSBmaW5kTW92ZVRvUmVnaW9uKGVsZW1lbnQsIGRpcmVjdGlvbik7XG4gICAgICAgIGlmIChtb3ZlVG9SZWdpb24pIHtcbiAgICAgICAgICByZXR1cm4gZmluZFJlZ2lvbk1vdmVUb0VsZW1lbnQobW92ZVRvUmVnaW9uLCBlbGVtZW50LCBkaXJlY3Rpb24pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgIG1vdmVUb0VsZW1lbnQgPSByZWdpb24uY2hpbGRyZW4oJ1tkYXRhLWxheW91dC1ibG9jay11dWlkXSwgLm5ldy1ibG9jaycpLmZpcnN0KCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbW92ZVRvRWxlbWVudCA9IHJlZ2lvbi5maW5kKCcubmV3LWJsb2NrJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1vdmVUb0VsZW1lbnQubGVuZ3RoID09PSAwID8gbnVsbCA6IG1vdmVUb0VsZW1lbnQ7XG4gIH1cbiAgZnVuY3Rpb24gbW92ZUNvbXBvbmVudChlbGVtZW50LCBkaXJlY3Rpb24pIHtcblxuICAgIGVsZW1lbnQuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJywgJ2xpZ2h0Ymx1ZScpO1xuICAgIGNvbnN0IG1vdmVUb0VsZW1lbnQgPSBmaW5kUmVnaW9uTW92ZVRvRWxlbWVudChnZXRDb21wb25lbnRSZWdpb24oZWxlbWVudCksIGVsZW1lbnQsIGRpcmVjdGlvbik7XG4gICAgaWYgKG1vdmVUb0VsZW1lbnQpIHtcbiAgICAgIG1vdmVUb0VsZW1lbnQuYmVmb3JlKGVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG5cblxuICBiZWhhdmlvcnMubGF5b3V0QnVpbGRlciA9IHtcbiAgICBhdHRhY2goY29udGV4dCkge1xuICAgICAgJChjb250ZXh0KVxuICAgICAgICAuZmluZCgnLmxheW91dC1idWlsZGVyLS1sYXlvdXRfX3JlZ2lvbicpXG4gICAgICAgIC5zb3J0YWJsZSh7XG4gICAgICAgICAgaXRlbXM6ICc+IC5kcmFnZ2FibGUnLFxuICAgICAgICAgIGNvbm5lY3RXaXRoOiAnLmxheW91dC1idWlsZGVyLS1sYXlvdXRfX3JlZ2lvbicsXG4gICAgICAgICAgcGxhY2Vob2xkZXI6ICd1aS1zdGF0ZS1kcm9wJyxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIFVwZGF0ZXMgdGhlIGxheW91dCB3aXRoIHRoZSBuZXcgcG9zaXRpb24gb2YgdGhlIGJsb2NrLlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogQHBhcmFtIHtqUXVlcnkuRXZlbnR9IGV2ZW50XG4gICAgICAgICAgICogICBUaGUgalF1ZXJ5IEV2ZW50IG9iamVjdC5cbiAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gdWlcbiAgICAgICAgICAgKiAgIEFuIG9iamVjdCBjb250YWluaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpdGVtIGJlaW5nIHNvcnRlZC5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICB1cGRhdGUoZXZlbnQsIHVpKSB7XG4gICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgcmVnaW9uIGZyb20gdGhlIGV2ZW50IGFuZCByZWdpb24gZm9yIHRoZSBpdGVtIG1hdGNoLlxuICAgICAgICAgICAgY29uc3QgaXRlbVJlZ2lvbiA9IHVpLml0ZW0uY2xvc2VzdChcbiAgICAgICAgICAgICAgJy5sYXlvdXQtYnVpbGRlci0tbGF5b3V0X19yZWdpb24nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQgPT09IGl0ZW1SZWdpb25bMF0pIHtcbiAgICAgICAgICAgICAgLy8gRmluZCB0aGUgZGVzdGluYXRpb24gZGVsdGEuXG4gICAgICAgICAgICAgIGNvbnN0IGRlbHRhVG8gPSB1aS5pdGVtXG4gICAgICAgICAgICAgICAgLmNsb3Nlc3QoJ1tkYXRhLWxheW91dC1kZWx0YV0nKVxuICAgICAgICAgICAgICAgIC5kYXRhKCdsYXlvdXQtZGVsdGEnKTtcbiAgICAgICAgICAgICAgLy8gSWYgdGhlIGJsb2NrIGRpZG4ndCBsZWF2ZSB0aGUgb3JpZ2luYWwgZGVsdGEgdXNlIHRoZSBkZXN0aW5hdGlvbi5cbiAgICAgICAgICAgICAgY29uc3QgZGVsdGFGcm9tID0gdWkuc2VuZGVyXG4gICAgICAgICAgICAgICAgPyB1aS5zZW5kZXIuY2xvc2VzdCgnW2RhdGEtbGF5b3V0LWRlbHRhXScpLmRhdGEoJ2xheW91dC1kZWx0YScpXG4gICAgICAgICAgICAgICAgOiBkZWx0YVRvO1xuICAgICAgICAgICAgICBhamF4KHtcbiAgICAgICAgICAgICAgICB1cmw6IFtcbiAgICAgICAgICAgICAgICAgIHVpLml0ZW1cbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJ1tkYXRhLWxheW91dC11cGRhdGUtdXJsXScpXG4gICAgICAgICAgICAgICAgICAgIC5kYXRhKCdsYXlvdXQtdXBkYXRlLXVybCcpLFxuICAgICAgICAgICAgICAgICAgZGVsdGFGcm9tLFxuICAgICAgICAgICAgICAgICAgZGVsdGFUbyxcbiAgICAgICAgICAgICAgICAgIGl0ZW1SZWdpb24uZGF0YSgncmVnaW9uJyksXG4gICAgICAgICAgICAgICAgICB1aS5pdGVtLmRhdGEoJ2xheW91dC1ibG9jay11dWlkJyksXG4gICAgICAgICAgICAgICAgICB1aS5pdGVtXG4gICAgICAgICAgICAgICAgICAgIC5wcmV2KCdbZGF0YS1sYXlvdXQtYmxvY2stdXVpZF0nKVxuICAgICAgICAgICAgICAgICAgICAuZGF0YSgnbGF5b3V0LWJsb2NrLXV1aWQnKSxcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAuZmlsdGVyKGVsZW1lbnQgPT4gZWxlbWVudCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgLmpvaW4oJy8nKSxcbiAgICAgICAgICAgICAgfSkuZXhlY3V0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgJChjb250ZXh0KS5maW5kKCdbZGF0YS1sYXlvdXQtYnVpbGRlci1yZW9yZGVyXSBbZGF0YS1sYXlvdXQtYnVpbGRlci1yZW9yZGVyLWRpcmVjdGlvbl0nKS5vbignY2xpY2snLCBlID0+IHtcbiAgICAgICAgY29uc3QgZGlyZWN0aW9uID0gJChlLnRhcmdldCkuYXR0cignZGF0YS1sYXlvdXQtYnVpbGRlci1yZW9yZGVyLWRpcmVjdGlvbicpO1xuICAgICAgICBjb25zdCBjb21wb25lbnQgPSAkKGUudGFyZ2V0KS5jbG9zZXN0KCdbZGF0YS1sYXlvdXQtYmxvY2stdXVpZF0nKTtcbiAgICAgICAgLy9jb21wb25lbnQuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJywgJ2xpZ2h0Ymx1ZScpO1xuICAgICAgICBtb3ZlQ29tcG9uZW50KGNvbXBvbmVudCwgZGlyZWN0aW9uKTtcbiAgICAgICAgJChlLnRhcmdldCkuZm9jdXMoKTtcbiAgICAgICAgLy9jb21wb25lbnQuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJyk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59KShqUXVlcnksIERydXBhbCk7XG4iXX0=