/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(function ($, Drupal) {
  var ajax = Drupal.ajax,
      behaviors = Drupal.behaviors,
      announce = Drupal.announce;

  behaviors.layoutBuilderBlockDrag = {
    attach: function attach(context) {
      $(context).find('.layout-builder--layout__region').sortable({
        items: '> .draggable',
        connectWith: '.layout-builder--layout__region',
        placeholder: 'ui-state-drop',

        update: function update(event, ui) {
          var itemRegion = ui.item.closest('.layout-builder--layout__region');
          if (event.target === itemRegion[0]) {
            var deltaTo = ui.item.closest('[data-layout-delta]').data('layout-delta');

            var deltaFrom = ui.sender ? ui.sender.closest('[data-layout-delta]').data('layout-delta') : deltaTo;
            ajax({
              url: [ui.item.closest('[data-layout-update-url]').data('layout-update-url'), deltaFrom, deltaTo, itemRegion.data('region'), ui.item.data('layout-block-uuid'), ui.item.prev('[data-layout-block-uuid]').data('layout-block-uuid')].filter(function (element) {
                return element !== undefined;
              }).join('/')
            }).execute();
          }
        }
      });
    }
  };

  behaviors.layoutBuilderToggleLivePreview = {
    attach: function attach(context) {
      var $layoutBuilder = $('#layout-builder');

      var $layoutBuilderLivePreview = $('#layout-builder-live-preview');

      var livePreviewId = $layoutBuilderLivePreview.data('live-preview-id');

      var livePreviewActive = localStorage.getItem(livePreviewId);

      function gridMode(transitionTime) {
        $layoutBuilder.addClass('layout-builder-grid-mode');
        $('[data-layout-grid-mode-label]').each(function (i, element) {
          var $element = $(element);
          $element.children(':not(.contextual)').hide(transitionTime);
          var adminLabel = document.createElement('h2');
          adminLabel.className = 'data-layout-grid-mode-label';
          adminLabel.innerHTML = $element.attr('data-layout-grid-mode-label');
          $element.prepend(adminLabel);
        });
      }

      function livePreviewMode(transitionTime) {
        $layoutBuilder.removeClass('layout-builder-grid-mode');
        $('.data-layout-grid-mode-label').remove();
        $('[data-layout-grid-mode-label]').each(function (i, element) {
          $(element).children().show(transitionTime);
        });
      }

      $('#layout-builder-live-preview', context).on('change', function (event) {
        var $target = $(event.currentTarget);
        var isChecked = $target.is(':checked');
        localStorage.setItem(livePreviewId, isChecked);

        if (isChecked) {
          livePreviewMode(500);
          announce(Drupal.t('Layout Builder editor is in live preview mode.'));
        } else {
          gridMode(500);
          announce(Drupal.t('Layout Builder editor is in grid mode.'));
        }
      });

      if (livePreviewActive === 'false') {
        $layoutBuilderLivePreview.attr('checked', false);
        gridMode(0);
      }
    }
  };
  $(window).on('dialog:aftercreate', function (event, dialog, $element) {
    $('.layout-builder-highlight').removeClass('layout-builder-highlight');
    if ($element.find('[data-layout-builder-target-highlight-id]')) {
      var id = $element.find('[data-layout-builder-target-highlight-id]').attr('data-layout-builder-target-highlight-id');
      $('[data-layout-builder-highlight-id="' + id + '"]').addClass('layout-builder-highlight');
    }
  });
  $(window).on('dialog:afterclose', function () {
    $('.layout-builder-highlight').removeClass('layout-builder-highlight');
  });
})(jQuery, Drupal);