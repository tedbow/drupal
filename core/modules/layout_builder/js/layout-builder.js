/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(function ($, _ref) {
  var ajax = _ref.ajax,
      behaviors = _ref.behaviors;

  behaviors.layoutBuilder = {
    attach: function attach(context) {
      $(context).find('.layout-builder--layout__region').sortable({
        items: '> .draggable',
        connectWith: '.layout-builder--layout__region',
        placeholder: 'ui-state-drop',

        update: function update(event, ui) {
          var itemRegion = ui.item.closest('.layout-builder--layout__region');
          if (event.target === itemRegion[0]) {
            var deltaTo = ui.item.closest('[data-layout-delta]').data('layout-delta');

            var deltaFrom = ui.sender ? ui.sender.closest('[data-layout-delta]').data('layout-delta') : deltaTo;
            ajax({
              url: [ui.item.closest('[data-layout-update-url]').data('layout-update-url'), deltaFrom, deltaTo, itemRegion.data('region'), ui.item.data('layout-block-uuid'), ui.item.prev('[data-layout-block-uuid]').data('layout-block-uuid')].filter(function (element) {
                return element !== undefined;
              }).join('/')
            }).execute();
          }
        }
      });
      $('.layout-builder-block-reorder a').once().on('click.layoutbuilder', function (e) {
        var current = $(e.target).closest('.draggable').get(0);
        current.classList.add('drag-current');
        var newNode = document.createElement("span");
        newNode.classList.add('ui-state-drop');

        current.parentNode.insertBefore(newNode, current);

        e.preventDefault();
        e.stopPropagation();
      });
    }
  };
})(jQuery, Drupal);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxheW91dC1idWlsZGVyLmVzNi5qcyJdLCJuYW1lcyI6WyIkIiwiYWpheCIsImJlaGF2aW9ycyIsImxheW91dEJ1aWxkZXIiLCJhdHRhY2giLCJjb250ZXh0IiwiZmluZCIsInNvcnRhYmxlIiwiaXRlbXMiLCJjb25uZWN0V2l0aCIsInBsYWNlaG9sZGVyIiwidXBkYXRlIiwiZXZlbnQiLCJ1aSIsIml0ZW1SZWdpb24iLCJpdGVtIiwiY2xvc2VzdCIsInRhcmdldCIsImRlbHRhVG8iLCJkYXRhIiwiZGVsdGFGcm9tIiwic2VuZGVyIiwidXJsIiwicHJldiIsImZpbHRlciIsImVsZW1lbnQiLCJ1bmRlZmluZWQiLCJqb2luIiwiZXhlY3V0ZSIsIm9uY2UiLCJvbiIsImN1cnJlbnQiLCJlIiwiZ2V0IiwiY2xhc3NMaXN0IiwiYWRkIiwibmV3Tm9kZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInBhcmVudE5vZGUiLCJpbnNlcnRCZWZvcmUiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImpRdWVyeSIsIkRydXBhbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLENBQUMsVUFBQ0EsQ0FBRCxRQUE0QjtBQUFBLE1BQXRCQyxJQUFzQixRQUF0QkEsSUFBc0I7QUFBQSxNQUFoQkMsU0FBZ0IsUUFBaEJBLFNBQWdCOztBQUMzQkEsWUFBVUMsYUFBVixHQUEwQjtBQUN4QkMsVUFEd0Isa0JBQ2pCQyxPQURpQixFQUNSO0FBQ2RMLFFBQUVLLE9BQUYsRUFDR0MsSUFESCxDQUNRLGlDQURSLEVBRUdDLFFBRkgsQ0FFWTtBQUNSQyxlQUFPLGNBREM7QUFFUkMscUJBQWEsaUNBRkw7QUFHUkMscUJBQWEsZUFITDs7QUFhUkMsY0FiUSxrQkFhREMsS0FiQyxFQWFNQyxFQWJOLEVBYVU7QUFFaEIsY0FBTUMsYUFBYUQsR0FBR0UsSUFBSCxDQUFRQyxPQUFSLENBQ2pCLGlDQURpQixDQUFuQjtBQUdBLGNBQUlKLE1BQU1LLE1BQU4sS0FBaUJILFdBQVcsQ0FBWCxDQUFyQixFQUFvQztBQUVsQyxnQkFBTUksVUFBVUwsR0FBR0UsSUFBSCxDQUNiQyxPQURhLENBQ0wscUJBREssRUFFYkcsSUFGYSxDQUVSLGNBRlEsQ0FBaEI7O0FBSUEsZ0JBQU1DLFlBQVlQLEdBQUdRLE1BQUgsR0FDZFIsR0FBR1EsTUFBSCxDQUFVTCxPQUFWLENBQWtCLHFCQUFsQixFQUF5Q0csSUFBekMsQ0FBOEMsY0FBOUMsQ0FEYyxHQUVkRCxPQUZKO0FBR0FqQixpQkFBSztBQUNIcUIsbUJBQUssQ0FDSFQsR0FBR0UsSUFBSCxDQUNHQyxPQURILENBQ1csMEJBRFgsRUFFR0csSUFGSCxDQUVRLG1CQUZSLENBREcsRUFJSEMsU0FKRyxFQUtIRixPQUxHLEVBTUhKLFdBQVdLLElBQVgsQ0FBZ0IsUUFBaEIsQ0FORyxFQU9ITixHQUFHRSxJQUFILENBQVFJLElBQVIsQ0FBYSxtQkFBYixDQVBHLEVBUUhOLEdBQUdFLElBQUgsQ0FDR1EsSUFESCxDQUNRLDBCQURSLEVBRUdKLElBRkgsQ0FFUSxtQkFGUixDQVJHLEVBWUZLLE1BWkUsQ0FZSztBQUFBLHVCQUFXQyxZQUFZQyxTQUF2QjtBQUFBLGVBWkwsRUFhRkMsSUFiRSxDQWFHLEdBYkg7QUFERixhQUFMLEVBZUdDLE9BZkg7QUFnQkQ7QUFDRjtBQTVDTyxPQUZaO0FBZ0RBNUIsUUFBRSxpQ0FBRixFQUFxQzZCLElBQXJDLEdBQTRDQyxFQUE1QyxDQUErQyxxQkFBL0MsRUFBc0UsYUFBSztBQUN6RSxZQUFNQyxVQUFVL0IsRUFBRWdDLEVBQUVmLE1BQUosRUFBWUQsT0FBWixDQUFvQixZQUFwQixFQUFrQ2lCLEdBQWxDLENBQXNDLENBQXRDLENBQWhCO0FBQ0FGLGdCQUFRRyxTQUFSLENBQWtCQyxHQUFsQixDQUFzQixjQUF0QjtBQUNBLFlBQU1DLFVBQVVDLFNBQVNDLGFBQVQsQ0FBdUIsTUFBdkIsQ0FBaEI7QUFDQUYsZ0JBQVFGLFNBQVIsQ0FBa0JDLEdBQWxCLENBQXNCLGVBQXRCOztBQUVBSixnQkFBUVEsVUFBUixDQUFtQkMsWUFBbkIsQ0FBZ0NKLE9BQWhDLEVBQXlDTCxPQUF6Qzs7QUFLQUMsVUFBRVMsY0FBRjtBQUNBVCxVQUFFVSxlQUFGO0FBRUQsT0FkRDtBQWVEO0FBakV1QixHQUExQjtBQW1FRCxDQXBFRCxFQW9FR0MsTUFwRUgsRUFvRVdDLE1BcEVYIiwiZmlsZSI6ImxheW91dC1idWlsZGVyLmVzNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIigoJCwgeyBhamF4LCBiZWhhdmlvcnMgfSkgPT4ge1xuICBiZWhhdmlvcnMubGF5b3V0QnVpbGRlciA9IHtcbiAgICBhdHRhY2goY29udGV4dCkge1xuICAgICAgJChjb250ZXh0KVxuICAgICAgICAuZmluZCgnLmxheW91dC1idWlsZGVyLS1sYXlvdXRfX3JlZ2lvbicpXG4gICAgICAgIC5zb3J0YWJsZSh7XG4gICAgICAgICAgaXRlbXM6ICc+IC5kcmFnZ2FibGUnLFxuICAgICAgICAgIGNvbm5lY3RXaXRoOiAnLmxheW91dC1idWlsZGVyLS1sYXlvdXRfX3JlZ2lvbicsXG4gICAgICAgICAgcGxhY2Vob2xkZXI6ICd1aS1zdGF0ZS1kcm9wJyxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIFVwZGF0ZXMgdGhlIGxheW91dCB3aXRoIHRoZSBuZXcgcG9zaXRpb24gb2YgdGhlIGJsb2NrLlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogQHBhcmFtIHtqUXVlcnkuRXZlbnR9IGV2ZW50XG4gICAgICAgICAgICogICBUaGUgalF1ZXJ5IEV2ZW50IG9iamVjdC5cbiAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gdWlcbiAgICAgICAgICAgKiAgIEFuIG9iamVjdCBjb250YWluaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpdGVtIGJlaW5nIHNvcnRlZC5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICB1cGRhdGUoZXZlbnQsIHVpKSB7XG4gICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgcmVnaW9uIGZyb20gdGhlIGV2ZW50IGFuZCByZWdpb24gZm9yIHRoZSBpdGVtIG1hdGNoLlxuICAgICAgICAgICAgY29uc3QgaXRlbVJlZ2lvbiA9IHVpLml0ZW0uY2xvc2VzdChcbiAgICAgICAgICAgICAgJy5sYXlvdXQtYnVpbGRlci0tbGF5b3V0X19yZWdpb24nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQgPT09IGl0ZW1SZWdpb25bMF0pIHtcbiAgICAgICAgICAgICAgLy8gRmluZCB0aGUgZGVzdGluYXRpb24gZGVsdGEuXG4gICAgICAgICAgICAgIGNvbnN0IGRlbHRhVG8gPSB1aS5pdGVtXG4gICAgICAgICAgICAgICAgLmNsb3Nlc3QoJ1tkYXRhLWxheW91dC1kZWx0YV0nKVxuICAgICAgICAgICAgICAgIC5kYXRhKCdsYXlvdXQtZGVsdGEnKTtcbiAgICAgICAgICAgICAgLy8gSWYgdGhlIGJsb2NrIGRpZG4ndCBsZWF2ZSB0aGUgb3JpZ2luYWwgZGVsdGEgdXNlIHRoZSBkZXN0aW5hdGlvbi5cbiAgICAgICAgICAgICAgY29uc3QgZGVsdGFGcm9tID0gdWkuc2VuZGVyXG4gICAgICAgICAgICAgICAgPyB1aS5zZW5kZXIuY2xvc2VzdCgnW2RhdGEtbGF5b3V0LWRlbHRhXScpLmRhdGEoJ2xheW91dC1kZWx0YScpXG4gICAgICAgICAgICAgICAgOiBkZWx0YVRvO1xuICAgICAgICAgICAgICBhamF4KHtcbiAgICAgICAgICAgICAgICB1cmw6IFtcbiAgICAgICAgICAgICAgICAgIHVpLml0ZW1cbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJ1tkYXRhLWxheW91dC11cGRhdGUtdXJsXScpXG4gICAgICAgICAgICAgICAgICAgIC5kYXRhKCdsYXlvdXQtdXBkYXRlLXVybCcpLFxuICAgICAgICAgICAgICAgICAgZGVsdGFGcm9tLFxuICAgICAgICAgICAgICAgICAgZGVsdGFUbyxcbiAgICAgICAgICAgICAgICAgIGl0ZW1SZWdpb24uZGF0YSgncmVnaW9uJyksXG4gICAgICAgICAgICAgICAgICB1aS5pdGVtLmRhdGEoJ2xheW91dC1ibG9jay11dWlkJyksXG4gICAgICAgICAgICAgICAgICB1aS5pdGVtXG4gICAgICAgICAgICAgICAgICAgIC5wcmV2KCdbZGF0YS1sYXlvdXQtYmxvY2stdXVpZF0nKVxuICAgICAgICAgICAgICAgICAgICAuZGF0YSgnbGF5b3V0LWJsb2NrLXV1aWQnKSxcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAuZmlsdGVyKGVsZW1lbnQgPT4gZWxlbWVudCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgLmpvaW4oJy8nKSxcbiAgICAgICAgICAgICAgfSkuZXhlY3V0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgJCgnLmxheW91dC1idWlsZGVyLWJsb2NrLXJlb3JkZXIgYScpLm9uY2UoKS5vbignY2xpY2subGF5b3V0YnVpbGRlcicsIGUgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gJChlLnRhcmdldCkuY2xvc2VzdCgnLmRyYWdnYWJsZScpLmdldCgwKTtcbiAgICAgICAgY3VycmVudC5jbGFzc0xpc3QuYWRkKCdkcmFnLWN1cnJlbnQnKTtcbiAgICAgICAgY29uc3QgbmV3Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICBuZXdOb2RlLmNsYXNzTGlzdC5hZGQoJ3VpLXN0YXRlLWRyb3AnKTtcblxuICAgICAgICBjdXJyZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUsIGN1cnJlbnQpO1xuICAgICAgICAvL2N1cnJlbnQucHJldigpLmJlZm9yZShjdXJyZW50KTtcbiAgICAgICAgLy8kKCcubGF5b3V0LWJ1aWxkZXItLWxheW91dF9fcmVnaW9uJykuc29ydGFibGUoIFwicmVmcmVzaFwiICk7XG4gICAgICAgIC8vY3VycmVudC5zb3J0YWJsZSggXCJyZWZyZXNoUG9zaXRpb25zXCIgKTtcbiAgICAgICAgLy9hbGVydCgnamRmJyk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgfSk7XG4gICAgfSxcbiAgfTtcbn0pKGpRdWVyeSwgRHJ1cGFsKTtcbiJdfQ==