<?php

/**
 * @file
 * Provides hook implementations for Layout Builder.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\field\FieldConfigInterface;
use Drupal\layout_builder\Entity\LayoutBuilderEntityViewDisplay;
use Drupal\layout_builder\Entity\LayoutBuilderEntityViewDisplayStorage;
use Drupal\layout_builder\Form\LayoutBuilderEntityViewDisplayForm;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\layout_builder\Entity\LayoutEntityDisplayInterface;
use Drupal\layout_builder\Plugin\Block\ExtraFieldBlock;
use Drupal\block_content\Entity\BlockContent;

/**
 * Implements hook_help().
 */
function layout_builder_help($route_name, RouteMatchInterface $route_match) {
  // Add help text to the Layout Builder UI.
  if ($route_match->getRouteObject()->getOption('_layout_builder')) {
    $output = '<p>' . t('This layout builder tool allows you to configure the layout of the main content area.') . '</p>';
    if (\Drupal::currentUser()->hasPermission('administer blocks')) {
      $output .= '<p>' . t('To manage other areas of the page, use the <a href="@block-ui">block administration page</a>.', ['@block-ui' => Url::fromRoute('block.admin_display')->toString()]) . '</p>';
    }
    else {
      $output .= '<p>' . t('To manage other areas of the page, use the block administration page.') . '</p>';
    }
    return $output;
  }

  switch ($route_name) {
    case 'help.page.layout_builder':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Layout Builder provides layout building utility.') . '</p>';
      $output .= '<p>' . t('For more information, see the <a href=":layout-builder-documentation">online documentation for the Layout Builder module</a>.', [':layout-builder-documentation' => 'https://www.drupal.org/docs/8/core/modules/layout_builder']) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function layout_builder_entity_type_alter(array &$entity_types) {
  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
  $entity_types['entity_view_display']
    ->setClass(LayoutBuilderEntityViewDisplay::class)
    ->setStorageClass(LayoutBuilderEntityViewDisplayStorage::class)
    ->setFormClass('edit', LayoutBuilderEntityViewDisplayForm::class);
}

/**
 * Implements hook_form_FORM_ID_alter() for \Drupal\field_ui\Form\EntityFormDisplayEditForm.
 */
function layout_builder_form_entity_form_display_edit_form_alter(&$form, FormStateInterface $form_state) {
  // Hides the Layout Builder field. It is rendered directly in
  // \Drupal\layout_builder\Entity\LayoutBuilderEntityViewDisplay::buildMultiple().
  unset($form['fields']['layout_builder__layout']);
  $key = array_search('layout_builder__layout', $form['#fields']);
  if ($key !== FALSE) {
    unset($form['#fields'][$key]);
  }
}

/**
 * Implements hook_field_config_insert().
 */
function layout_builder_field_config_insert(FieldConfigInterface $field_config) {
  // Clear the sample entity for this entity type and bundle.
  $sample_entity_generator = \Drupal::service('layout_builder.sample_entity_generator');
  $sample_entity_generator->delete($field_config->getTargetEntityTypeId(), $field_config->getTargetBundle());
  \Drupal::service('plugin.manager.block')->clearCachedDefinitions();
}

/**
 * Implements hook_field_config_delete().
 */
function layout_builder_field_config_delete(FieldConfigInterface $field_config) {
  // Clear the sample entity for this entity type and bundle.
  $sample_entity_generator = \Drupal::service('layout_builder.sample_entity_generator');
  $sample_entity_generator->delete($field_config->getTargetEntityTypeId(), $field_config->getTargetBundle());
  \Drupal::service('plugin.manager.block')->clearCachedDefinitions();
}

/**
 * Implements hook_entity_view_alter().
 *
 * ExtraFieldBlock block plugins add placeholders for each extra field which is
 * configured to be displayed. Those placeholders are replaced by this hook.
 * Modules that implement hook_entity_extra_field_info() use their
 * implementations of hook_entity_view_alter() to add the rendered output of
 * the extra fields they provide, so we cannot get the rendered output of extra
 * fields before this point in the view process.
 * layout_builder_module_implements_alter() moves this implementation of
 * hook_entity_view_alter() to the end of the list.
 *
 * @see \Drupal\layout_builder\Plugin\Block\ExtraFieldBlock::build()
 * @see layout_builder_module_implements_alter()
 */
function layout_builder_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($display instanceof LayoutEntityDisplayInterface) {
    /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager */
    $field_manager = \Drupal::service('entity_field.manager');
    $extra_fields = $field_manager->getExtraFields($entity->getEntityTypeId(), $entity->bundle());
    if (!empty($extra_fields['display'])) {
      foreach ($extra_fields['display'] as $field_name => $extra_field) {
        // If the extra field is not set replace with an empty array to avoid
        // the placeholder text from being rendered.
        $replacement = isset($build[$field_name]) ? $build[$field_name] : [];
        ExtraFieldBlock::replaceFieldPlaceholder($build, $replacement, $field_name);
        // After the rendered field in $build has been copied over to the
        // ExtraFieldBlock block we must remove it from its original location or
        // else it will be rendered twice.
        unset($build[$field_name]);
      }
    }
  }
}

/**
 * Implements hook_builder_module_implements_alter().
 */
function layout_builder_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'entity_view_alter') {
    // Ensure that this module's implementation of hook_entity_view_alter() runs
    // last so that other modules that use this hook to render extra fields will
    // run before it.
    $group = $implementations['layout_builder'];
    unset($implementations['layout_builder']);
    $implementations['layout_builder'] = $group;
  }
}

/**
 * Implements hook_plugin_filter_TYPE__CONSUMER_alter().
 *
 * Prevent a content_block entity from being added to its own layout in Layout
 * Builder.
 */
function layout_builder_plugin_filter_block__layout_builder_alter(array &$definitions, array $extra) {
  $section_storage = $extra['section_storage'];
  $section_storage_type = $section_storage->getStorageType();
  $section_storage_id = $section_storage->getStorageId();
  // Only perform filtering if the entity type is block_content.
  if (strpos($section_storage_id, 'block_content.') === 0) {
    switch ($section_storage_type) {
      case 'overrides':
        // Retrieve the block ID from the section storage ID.
        preg_match("/block_content.(\d+)/", $section_storage_id, $match);
        if ($match[0] === $section_storage_id) {
          $block = BlockContent::load($match[1]);
          // Unset block_content definition with matching UUID.
          unset($definitions['block_content:' . $block->uuid()]);
        }
        break;

      case 'defaults':
        // Retrieve the block type bundle from the section storage ID.
        preg_match("/block_content.(.*).default/", $section_storage_id, $match);
        if ($match[0] === $section_storage_id) {
          $bundle = $match[1];
          // @todo : Optimize query for non-reusable blocks; change in
          //   https://www.drupal.org/project/drupal/issues/2976334.
          $def = Drupal::entityTypeManager()->getDefinition('block_content');
          $select = \Drupal::database()->select($def->getBaseTable(), 't')
            ->fields('t', [$def->getKey('uuid')]);
          $select->condition($def->getKey('bundle'), $bundle);
          $uuids = $select->execute()->fetchCol();
          foreach ($uuids as $uuid) {
            // Unset any block_content instances with a matching bundle.
            unset($definitions['block_content:' . $uuid]);
          }
        }
        break;
    }
  }
}
