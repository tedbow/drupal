<?php

/**
 * @file
 * Allows configuring blocks and other configuration from the site front-end.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\outside_in\Block\BlockEntityOffCanvasForm;
use Drupal\outside_in\Form\SystemBrandingOffCanvasForm;
use Drupal\outside_in\Form\SystemMenuOffCanvasForm;

/**
 * Implements hook_help().
 */
function outside_in_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.outside_in':
      $output = '<h3>' . t('About') . '</h3>';
      // @todo Update help text.
      $output .= '<p>' . t('The Outside In module is something that we should have help for. For more information, see the <a href=":outside-in-documentation">online documentation for the Outside In module</a>.', [':outside-in-documentation' => 'https://www.drupal.org/documentation/modules/outside_in']) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_contextual_links_view_alter().
 *
 * Change Configure Blocks into offcanvas links.
 */
function outside_in_contextual_links_view_alter(&$element, $items) {
  if (isset($element['#links']['outside-inblock-configure'])) {
    $element['#links']['outside-inblock-configure']['attributes'] = [
      'class' => ['use-ajax'],
      'data-dialog-type' => 'offcanvas',
    ];

    $element['#attached'] = [
      'library' => [
        'outside_in/drupal.off_canvas',
      ],
    ];
  }
}

/**
 * Implements hook_page_top().
 *
 * Opens a div for consistent wrapping to all {{ page }} render in all themes.
 */
function outside_in_page_top(array &$page_top) {
  if (_outside_in_apply_on_current_page()) {
    $page_top['outside_in_tray_open'] = [
      '#markup' => '<div id="main-canvas-wrapper"><div id="main-canvas">',
      '#weight' => 1000,
    ];
  }
}

/**
 * Implements hook_page_bottom().
 *
 * Closes a div for consistent wrapping to all {{ page }} render in all themes.
 */
function outside_in_page_bottom(array &$page_bottom) {
  if (_outside_in_apply_on_current_page()) {
    $page_bottom['outside_in_tray_close'] = [
      '#markup' => '</div></div>',
      '#weight' => -1000,
    ];
  }
}

/**
 * Implements hook_entity_type_build().
 */
function outside_in_entity_type_build(array &$entity_types) {
  /* @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['block']
    ->setFormClass('offcanvas', BlockEntityOffCanvasForm::class)
    ->setLinkTemplate('offcanvas-form', '/admin/structure/block/manage/{block}/offcanvas');
}

/**
 * Implements hook_preprocess_HOOK() for block templates.
 *
 * Adds 'outside-in-editable' class to all blocks to allow Javascript to target.
 */
function outside_in_preprocess_block(&$variables) {
  // The main system block does not contain the block contextual links.
  if (!_outside_in_apply_on_current_page() || $variables['plugin_id'] == 'system_main_block') {
    return;
  }
  $variables['attributes']['class'][] = 'outside-in-editable';
}

/**
 * Determines if the Outside In logic should be run on the current page.
 *
 * @return bool
 *   TRUE if the Outside In logic should be run.
 */
function _outside_in_apply_on_current_page() {
  // Remove on Admin routes.
  $admin_route = \Drupal::service('router.admin_context')->isAdminRoute();
  // @todo Check if there is actually a different admin theme.
  // Remove on Block Demo page.
  $admin_demo = \Drupal::routeMatch()->getRouteName() === 'block.admin_demo';
  return \Drupal::currentUser()->hasPermission('administer blocks') && !$admin_route && !$admin_demo;

}

/**
 * Implements hook_toolbar_alter().
 *
 * Includes outside_library if Edit link is in toolbar.
 */
function outside_in_toolbar_alter(&$items) {
  if (_outside_in_apply_on_current_page() && isset($items['contextual']['tab'])) {
    $items['contextual']['#weight'] = -1000;
    $items['contextual']['#attached']['library'][] = 'outside_in/drupal.outside_in';

    // Set a class on items to mark whether they should be active in edit mode.
    // @todo Create a dynamic method for modules to set their own items.
    $edit_mode_items = ['contextual', 'block_place'];
    foreach ($items as $key => $item) {
      if (!in_array($key, $edit_mode_items) && (!isset($items[$key]['#wrapper_attributes']['class']) || !in_array('hidden', $items[$key]['#wrapper_attributes']['class']))) {
        $items[$key]['#wrapper_attributes']['class'][] = 'edit-mode-inactive';
      }
    }
  }
}

/**
 * Implements hook_block_alter().
 */
function outside_in_block_alter(&$definitions) {
  if (!empty($definitions['system_branding_block'])) {
    $definitions['system_branding_block']['forms']['offcanvas'] = SystemBrandingOffCanvasForm::class;
  }

  // Since menu blocks use derivatives, check the definition ID instead of
  // relying on the plugin ID.
  foreach ($definitions as &$definition) {
    if ($definition['id'] === 'system_menu_block') {
      $definition['forms']['offcanvas'] = SystemMenuOffCanvasForm::class;
    }
  }
}
