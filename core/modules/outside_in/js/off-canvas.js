/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(function ($, Drupal, debounce, displace) {

  'use strict';

  function resetSize(event) {
    var offsets = displace.offsets;
    var $element = event.data.$element;
    var $widget = this.getContainer($element);

    var adjustedOptions = {
      position: {
        my: edge + ' top',
        at: edge + ' top' + (offsets.top !== 0 ? '+' + offsets.top : ''),
        of: window
      }
    };

    $widget.css({
      position: 'fixed',
      height: $(window).height() - (offsets.top + offsets.bottom) + 'px'
    });

    $element.dialog('option', adjustedOptions).trigger('dialogContentResize.off-canvas');
  }

  function handleDialogResize(event) {
    var $element = event.data.$element;
    var $widget = $element.dialog('widget');

    var $offsets = $widget.find('> :not(#drupal-off-canvas, .ui-resizable-handle)');
    var offset = 0;
    var modalHeight;

    $element.css({ height: 'auto' });
    modalHeight = $widget.height();
    $offsets.each(function () {
      offset += $(this).outerHeight();
    });

    var scrollOffset = $element.outerHeight() - $element.height();
    $element.height(modalHeight - offset - scrollOffset);
  }

  function bodyPadding(event) {
    if ($('body').outerWidth() < minDisplaceWidth) {
      return;
    }
    var $element = event.data.$element;
    var $widget = this.getContainer($element);

    var width = $widget.outerWidth();
    var mainCanvasPadding = $mainCanvasWrapper.css('padding-' + edge);
    if (width !== mainCanvasPadding) {
      $mainCanvasWrapper.css('padding-' + edge, width + 'px');
      $widget.attr('data-offset-' + edge, width);
      displace();
    }
  }

  Drupal.offCanvas = {
    minDisplaceWidth: 768,

    edge: document.documentElement.dir === 'rtl' ? 'left' : 'right',

    $mainCanvasWrapper: $('[data-off-canvas-main-canvas]'),
    open: function open() {
      $('body').addClass('js-tray-open');

      settings.position = {
        my: 'left top',
        at: edge + ' top',
        of: window
      };
      settings.dialogClass += ' ui-dialog-off-canvas';

      settings.height = $(window).height();
    },
    close: function close() {
      $('body').removeClass('js-tray-open');

      $(document).off('.off-canvas');
      $(window).off('.off-canvas');
      $mainCanvasWrapper.css('padding-' + edge, 0);
    },
    render: function render() {
      var eventData = { settings: settings, $element: $element };
      $('.ui-dialog-off-canvas, .ui-dialog-off-canvas .ui-dialog-titlebar').toggleClass('ui-dialog-empty-title', !settings.title);

      $element.on('dialogresize.off-canvas', eventData, debounce(bodyPadding, 100)).on('dialogContentResize.off-canvas', eventData, handleDialogResize).on('dialogContentResize.off-canvas', eventData, debounce(bodyPadding, 100)).trigger('dialogresize.off-canvas');

      this.getContainer($element).attr('data-offset-' + edge, '');

      $(window).on('resize.off-canvas scroll.off-canvas', eventData, debounce(resetSize, 100)).trigger('resize.off-canvas');
    },
    handleDialogResize: handleDialogResize,
    resetSize: resetSize,
    bodyPadding: bodyPadding,
    getContainer: function getContainer($element) {
      return $element.dialog('widget');
    }
  };

  Drupal.behaviors.offCanvasEvents = {
    attach: function attach() {
      $(window).once('off-canvas').on({
        'dialog:aftercreate': function dialogAftercreate(event, dialog, $element, settings) {
          Drupal.offCanvas.render();
        },
        'dialog:beforecreate': function dialogBeforecreate(event, dialog, $element, settings) {
          Drupal.offCanvas.open();
        },
        'dialog:beforeclose': function dialogBeforeclose(event, dialog, $element) {
          Drupal.offCanvas.close();
        }
      });
    }
  };
})(jQuery, Drupal, Drupal.debounce, Drupal.displace);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,