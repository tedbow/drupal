<?php

namespace Drupal\Tests\Core\Access;

use Drupal\Core\Access\AccessGroupAnd;
use Drupal\Core\Access\AccessGroupOr;
use Drupal\Core\Access\AccessibleInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Access\AccessResultInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Tests\UnitTestCase;

class AccessGroupTest extends UnitTestCase {

  /**
   * @var \Drupal\Core\Session\AccountInterface
   */
  protected $account;

  protected function setUp() {
    parent::setUp(); // TODO: Change the autogenerated stub
    $this->account = $this->prophesize(AccountInterface::class)->reveal();
  }


  public function testGroups() {
    $allowed1 = $this->makeAccessbileProh(AccessResult::allowed());
    $allowed2 = $this->makeAccessbileProh(AccessResult::allowed());
    $forbidden1 = $this->makeAccessbileProh(AccessResult::forbidden());
    $forbidden2 = $this->makeAccessbileProh(AccessResult::forbidden());
    $neutral1 = $this->makeAccessbileProh(AccessResult::neutral());
    $neutral2 = $this->makeAccessbileProh(AccessResult::neutral());



    $orForbidden = new AccessGroupOr();
    $orForbidden->addDependency($allowed1)->addDependency($forbidden1);
    $this->assertTrue($orForbidden->access('view', $this->account, TRUE)->isForbidden());

    $orAllowed = new AccessGroupOr();
    $orAllowed->addDependency($allowed1)->addDependency($neutral1);
    $this->assertTrue($orAllowed->access('view', $this->account, TRUE)->isAllowed());

    $andForbidden = new AccessGroupAnd();
    $andForbidden->addDependency($allowed1)->addDependency($neutral1);
    $this->assertTrue($andForbidden->access('view', $this->account, TRUE)->isNeutral());

    $andForbidden->addDependency($forbidden1);
    $this->assertTrue($andForbidden->access('view', $this->account, TRUE)->isForbidden());
  }

  private function makeAccessbileProh(AccessResultInterface $accessResult) {
    $accessible = $this->prophesize(AccessibleInterface::class);
    $accessible->access('view', $this->account, TRUE)
      ->willReturn($accessResult);
    return $accessible->reveal();
  }

}
