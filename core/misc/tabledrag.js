/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function ($, Drupal, drupalSettings) {
  var showWeight = JSON.parse(localStorage.getItem('Drupal.tableDrag.showWeight'));

  Drupal.behaviors.tableDrag = {
    attach: function attach(context, settings) {
      function initTableDrag(table, base) {
        if (table.length) {
          Drupal.tableDrag[base] = new Drupal.tableDrag(table[0], settings.tableDrag[base]);
        }
      }

      Object.keys(settings.tableDrag || {}).forEach(function (base) {
        initTableDrag($(context).find('#' + base).once('tabledrag'), base);
      });
    }
  };

  Drupal.tableDrag = function (table, tableSettings) {
    var _this = this;

    var self = this;
    var $table = $(table);

    this.$table = $(table);

    this.table = table;

    this.tableSettings = tableSettings;

    this.dragObject = null;

    this.rowObject = null;

    this.oldRowElement = null;

    this.oldY = 0;

    this.changed = false;

    this.maxDepth = 0;

    this.rtl = $(this.table).css('direction') === 'rtl' ? -1 : 1;

    this.striping = $(this.table).data('striping') === 1;

    this.scrollSettings = { amount: 4, interval: 50, trigger: 70 };

    this.scrollInterval = null;

    this.scrollY = 0;

    this.windowHeight = 0;

    this.indentEnabled = false;
    Object.keys(tableSettings || {}).forEach(function (group) {
      Object.keys(tableSettings[group] || {}).forEach(function (n) {
        if (tableSettings[group][n].relationship === 'parent') {
          _this.indentEnabled = true;
        }
        if (tableSettings[group][n].limit > 0) {
          _this.maxDepth = tableSettings[group][n].limit;
        }
      });
    });
    if (this.indentEnabled) {
      this.indentCount = 1;

      var indent = Drupal.theme('tableDragIndentation');
      var testRow = $('<tr/>').addClass('draggable').appendTo(table);
      var testCell = $('<td/>').appendTo(testRow).prepend(indent).prepend(indent);
      var $indentation = testCell.find('.js-indentation');

      this.indentAmount = $indentation.get(1).offsetLeft - $indentation.get(0).offsetLeft;
      testRow.remove();
    }

    $table.find('> tr.draggable, > tbody > tr.draggable').each(function () {
      self.makeDraggable(this);
    });

    $table.before($('<button type="button" class="link tabledrag-toggle-weight"></button>').attr('title', Drupal.t('Re-order rows by numerical weight instead of dragging.')).on('click', $.proxy(function (e) {
      e.preventDefault();
      this.toggleColumns();
    }, this)).wrap('<div class="tabledrag-toggle-weight-wrapper"></div>').parent());

    self.initColumns();

    $(document).on('touchmove', function (event) {
      return self.dragRow(event.originalEvent.touches[0], self);
    });
    $(document).on('touchend', function (event) {
      return self.dropRow(event.originalEvent.touches[0], self);
    });
    $(document).on('mousemove pointermove', function (event) {
      return self.dragRow(event, self);
    });
    $(document).on('mouseup pointerup', function (event) {
      return self.dropRow(event, self);
    });

    $(window).on('storage', $.proxy(function (e) {
      if (e.originalEvent.key === 'Drupal.tableDrag.showWeight') {
        showWeight = JSON.parse(e.originalEvent.newValue);
        this.displayColumns(showWeight);
      }
    }, this));
  };

  Drupal.tableDrag.prototype.initColumns = function () {
    var _this2 = this;

    var $table = this.$table;
    var hidden = void 0;
    var cell = void 0;
    var columnIndex = void 0;
    Object.keys(this.tableSettings || {}).forEach(function (group) {
      Object.keys(_this2.tableSettings[group]).some(function (tableSetting) {
        var field = $table.find('.' + _this2.tableSettings[group][tableSetting].target).eq(0);
        if (field.length && _this2.tableSettings[group][tableSetting].hidden) {
          hidden = _this2.tableSettings[group][tableSetting].hidden;
          cell = field.closest('td');
          return true;
        }
        return false;
      });

      if (hidden && cell[0]) {
        columnIndex = cell.parent().find('> td').index(cell.get(0)) + 1;
        $table.find('> thead > tr, > tbody > tr, > tr').each(_this2.addColspanClass(columnIndex));
      }
    });
    this.displayColumns(showWeight);
  };

  Drupal.tableDrag.prototype.addColspanClass = function (columnIndex) {
    return function () {
      var $row = $(this);
      var index = columnIndex;
      var cells = $row.children();
      var cell = void 0;
      cells.each(function (n) {
        if (n < index && this.colSpan && this.colSpan > 1) {
          index -= this.colSpan - 1;
        }
      });
      if (index > 0) {
        cell = cells.filter(':nth-child(' + index + ')');
        if (cell[0].colSpan && cell[0].colSpan > 1) {
          cell.addClass('tabledrag-has-colspan');
        } else {
          cell.addClass('tabledrag-hide');
        }
      }
    };
  };

  Drupal.tableDrag.prototype.displayColumns = function (displayWeight) {
    if (displayWeight) {
      this.showColumns();
    } else {
        this.hideColumns();
      }

    $('table').findOnce('tabledrag').trigger('columnschange', !!displayWeight);
  };

  Drupal.tableDrag.prototype.toggleColumns = function () {
    showWeight = !showWeight;
    this.displayColumns(showWeight);
    if (showWeight) {
      localStorage.setItem('Drupal.tableDrag.showWeight', showWeight);
    } else {
      localStorage.removeItem('Drupal.tableDrag.showWeight');
    }
  };

  Drupal.tableDrag.prototype.hideColumns = function () {
    var $tables = $('table').findOnce('tabledrag');

    $tables.find('.tabledrag-hide').css('display', 'none');

    $tables.find('.tabledrag-handle').css('display', '');

    $tables.find('.tabledrag-has-colspan').each(function () {
      this.colSpan = this.colSpan - 1;
    });

    $('.tabledrag-toggle-weight').text(Drupal.t('Show row weights'));
  };

  Drupal.tableDrag.prototype.showColumns = function () {
    var $tables = $('table').findOnce('tabledrag');

    $tables.find('.tabledrag-hide').css('display', '');

    $tables.find('.tabledrag-handle').css('display', 'none');

    $tables.find('.tabledrag-has-colspan').each(function () {
      this.colSpan = this.colSpan + 1;
    });

    $('.tabledrag-toggle-weight').text(Drupal.t('Hide row weights'));
  };

  Drupal.tableDrag.prototype.rowSettings = function (group, row) {
    var field = $(row).find('.' + group);
    var tableSettingsGroup = this.tableSettings[group];
    return Object.keys(tableSettingsGroup).map(function (delta) {
      if (field.is('.' + tableSettingsGroup[delta].target)) {
        var rowSettings = {};
        Object.keys(tableSettingsGroup[delta]).forEach(function (n) {
          rowSettings[n] = tableSettingsGroup[delta][n];
        });
        return rowSettings;
      }
    })[0];
  };

  Drupal.tableDrag.prototype.makeDraggable = function (item) {
    var self = this;
    var $item = $(item);

    $item.find('td:first-of-type').find('a').addClass('menu-item__link');

    var handle = $('<a href="#" class="tabledrag-handle"><div class="handle">&nbsp;</div></a>').attr('title', Drupal.t('Drag to re-order'));

    var $indentationLast = $item.find('td:first-of-type').find('.js-indentation').eq(-1);
    if ($indentationLast.length) {
      $indentationLast.after(handle);

      self.indentCount = Math.max($item.find('.js-indentation').length, self.indentCount);
    } else {
      $item.find('td').eq(0).prepend(handle);
    }

    handle.on('mousedown touchstart pointerdown', function (event) {
      event.preventDefault();
      if (event.originalEvent.type === 'touchstart') {
        event = event.originalEvent.touches[0];
      }
      self.dragStart(event, self, item);
    });

    handle.on('click', function (e) {
      e.preventDefault();
    });

    handle.on('focus', function () {
      self.safeBlur = true;
    });

    handle.on('blur', function (event) {
      if (self.rowObject && self.safeBlur) {
        self.dropRow(event, self);
      }
    });

    handle.on('keydown', function (event) {
      if (event.keyCode !== 9 && !self.rowObject) {
        self.rowObject = new self.row(item, 'keyboard', self.indentEnabled, self.maxDepth, true);
      }

      var keyChange = false;
      var groupHeight = void 0;

      switch (event.keyCode) {
        case 37:
        case 63234:
          keyChange = true;
          self.rowObject.indent(-1 * self.rtl);
          break;

        case 38:
        case 63232:
          {
            var $previousRow = $(self.rowObject.element).prev('tr:first-of-type');
            var previousRow = $previousRow.get(0);
            while (previousRow && $previousRow.is(':hidden')) {
              $previousRow = $(previousRow).prev('tr:first-of-type');
              previousRow = $previousRow.get(0);
            }
            if (previousRow) {
              self.safeBlur = false;
              self.rowObject.direction = 'up';
              keyChange = true;

              if ($(item).is('.tabledrag-root')) {
                groupHeight = 0;
                while (previousRow && $previousRow.find('.js-indentation').length) {
                  $previousRow = $(previousRow).prev('tr:first-of-type');
                  previousRow = $previousRow.get(0);
                  groupHeight += $previousRow.is(':hidden') ? 0 : previousRow.offsetHeight;
                }
                if (previousRow) {
                  self.rowObject.swap('before', previousRow);

                  window.scrollBy(0, -groupHeight);
                }
              } else if (self.table.tBodies[0].rows[0] !== previousRow || $previousRow.is('.draggable')) {
                self.rowObject.swap('before', previousRow);
                self.rowObject.interval = null;
                self.rowObject.indent(0);
                window.scrollBy(0, -parseInt(item.offsetHeight, 10));
              }

              handle.trigger('focus');
            }
            break;
          }

        case 39:
        case 63235:
          keyChange = true;
          self.rowObject.indent(self.rtl);
          break;

        case 40:
        case 63233:
          {
            var $nextRow = $(self.rowObject.group).eq(-1).next('tr:first-of-type');
            var nextRow = $nextRow.get(0);
            while (nextRow && $nextRow.is(':hidden')) {
              $nextRow = $(nextRow).next('tr:first-of-type');
              nextRow = $nextRow.get(0);
            }
            if (nextRow) {
              self.safeBlur = false;
              self.rowObject.direction = 'down';
              keyChange = true;

              if ($(item).is('.tabledrag-root')) {
                groupHeight = 0;
                var nextGroup = new self.row(nextRow, 'keyboard', self.indentEnabled, self.maxDepth, false);
                if (nextGroup) {
                  $(nextGroup.group).each(function () {
                    groupHeight += $(this).is(':hidden') ? 0 : this.offsetHeight;
                  });
                  var nextGroupRow = $(nextGroup.group).eq(-1).get(0);
                  self.rowObject.swap('after', nextGroupRow);

                  window.scrollBy(0, parseInt(groupHeight, 10));
                }
              } else {
                self.rowObject.swap('after', nextRow);
                self.rowObject.interval = null;
                self.rowObject.indent(0);
                window.scrollBy(0, parseInt(item.offsetHeight, 10));
              }

              handle.trigger('focus');
            }
            break;
          }
      }

      if (self.rowObject && self.rowObject.changed === true) {
        $(item).addClass('drag');
        if (self.oldRowElement) {
          $(self.oldRowElement).removeClass('drag-previous');
        }
        self.oldRowElement = item;
        if (self.striping === true) {
          self.restripeTable();
        }
        self.onDrag();
      }

      if (keyChange) {
        return false;
      }
    });

    handle.on('keypress', function (event) {

      switch (event.keyCode) {
        case 37:
        case 38:
        case 39:
        case 40:
          return false;
      }
    });
  };

  Drupal.tableDrag.prototype.dragStart = function (event, self, item) {
    self.dragObject = {};
    self.dragObject.initOffset = self.getPointerOffset(item, event);
    self.dragObject.initPointerCoords = self.pointerCoords(event);
    if (self.indentEnabled) {
      self.dragObject.indentPointerPos = self.dragObject.initPointerCoords;
    }

    if (self.rowObject) {
      $(self.rowObject.element).find('a.tabledrag-handle').trigger('blur');
    }

    self.rowObject = new self.row(item, 'pointer', self.indentEnabled, self.maxDepth, true);

    self.table.topY = $(self.table).offset().top;
    self.table.bottomY = self.table.topY + self.table.offsetHeight;

    $(item).addClass('drag');

    $('body').addClass('drag');
    if (self.oldRowElement) {
      $(self.oldRowElement).removeClass('drag-previous');
    }
  };

  Drupal.tableDrag.prototype.dragRow = function (event, self) {
    if (self.dragObject) {
      self.currentPointerCoords = self.pointerCoords(event);
      var y = self.currentPointerCoords.y - self.dragObject.initOffset.y;
      var x = self.currentPointerCoords.x - self.dragObject.initOffset.x;

      if (y !== self.oldY) {
        self.rowObject.direction = y > self.oldY ? 'down' : 'up';

        self.oldY = y;

        var scrollAmount = self.checkScroll(self.currentPointerCoords.y);

        clearInterval(self.scrollInterval);

        if (scrollAmount > 0 && self.rowObject.direction === 'down' || scrollAmount < 0 && self.rowObject.direction === 'up') {
          self.setScroll(scrollAmount);
        }

        var currentRow = self.findDropTargetRow(x, y);
        if (currentRow) {
          if (self.rowObject.direction === 'down') {
            self.rowObject.swap('after', currentRow, self);
          } else {
            self.rowObject.swap('before', currentRow, self);
          }
          if (self.striping === true) {
            self.restripeTable();
          }
        }
      }

      if (self.indentEnabled) {
        var xDiff = self.currentPointerCoords.x - self.dragObject.indentPointerPos.x;

        var indentDiff = Math.round(xDiff / self.indentAmount);

        var indentChange = self.rowObject.indent(indentDiff);

        self.dragObject.indentPointerPos.x += self.indentAmount * indentChange * self.rtl;
        self.indentCount = Math.max(self.indentCount, self.rowObject.indents);
      }

      return false;
    }
  };

  Drupal.tableDrag.prototype.dropRow = function (event, self) {
    var droppedRow = void 0;
    var $droppedRow = void 0;

    if (self.rowObject !== null) {
      droppedRow = self.rowObject.element;
      $droppedRow = $(droppedRow);

      if (self.rowObject.changed === true) {
        self.updateFields(droppedRow);

        Object.keys(self.tableSettings || {}).forEach(function (group) {
          var rowSettings = self.rowSettings(group, droppedRow);
          if (rowSettings.relationship === 'group') {
            Object.keys(self.rowObject.children || {}).forEach(function (n) {
              self.updateField(self.rowObject.children[n], group);
            });
          }
        });

        self.rowObject.markChanged();
        if (self.changed === false) {
          $(Drupal.theme('tableDragChangedWarning')).insertBefore(self.table).hide().fadeIn('slow');
          self.changed = true;
        }
      }

      if (self.indentEnabled) {
        self.rowObject.removeIndentClasses();
      }
      if (self.oldRowElement) {
        $(self.oldRowElement).removeClass('drag-previous');
      }
      $droppedRow.removeClass('drag').addClass('drag-previous');
      self.oldRowElement = droppedRow;
      self.onDrop();
      self.rowObject = null;
    }

    if (self.dragObject !== null) {
      self.dragObject = null;
      $('body').removeClass('drag');
      clearInterval(self.scrollInterval);
    }
  };

  Drupal.tableDrag.prototype.pointerCoords = function (event) {
    if (event.pageX || event.pageY) {
      return { x: event.pageX, y: event.pageY };
    }
    return {
      x: event.clientX + document.body.scrollLeft - document.body.clientLeft,
      y: event.clientY + document.body.scrollTop - document.body.clientTop
    };
  };

  Drupal.tableDrag.prototype.getPointerOffset = function (target, event) {
    var docPos = $(target).offset();
    var pointerPos = this.pointerCoords(event);
    return { x: pointerPos.x - docPos.left, y: pointerPos.y - docPos.top };
  };

  Drupal.tableDrag.prototype.findDropTargetRow = function (x, y) {
    var _this3 = this;

    var rows = $(this.table.tBodies[0].rows).not(':hidden');

    var _loop = function _loop(n) {
      var row = rows[n];
      var $row = $(row);
      var rowY = $row.offset().top;
      var rowHeight = void 0;

      if (row.offsetHeight === 0) {
        rowHeight = parseInt(row.firstChild.offsetHeight, 10) / 2;
      } else {
          rowHeight = parseInt(row.offsetHeight, 10) / 2;
        }

      if (y > rowY - rowHeight && y < rowY + rowHeight) {
        if (_this3.indentEnabled) {
          if (Object.keys(_this3.rowObject.group).every(function (o) {
            return _this3.rowObject.group[o] === row;
          })) {
            return {
              v: null
            };
          }
        } else if (row === _this3.rowObject.element) {
            return {
              v: null
            };
          }

        if (!_this3.rowObject.isValidSwap(row)) {
          return {
            v: null
          };
        }

        while ($row.is(':hidden') && $row.prev('tr').is(':hidden')) {
          $row = $row.prev('tr:first-of-type');
          row = $row.get(0);
        }
        return {
          v: row
        };
      }
    };

    for (var n = 0; n < rows.length; n++) {
      var _ret = _loop(n);

      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
    }
    return null;
  };

  Drupal.tableDrag.prototype.updateFields = function (changedRow) {
    var _this4 = this;

    Object.keys(this.tableSettings || {}).forEach(function (group) {
      _this4.updateField(changedRow, group);
    });
  };

  Drupal.tableDrag.prototype.updateField = function (changedRow, group) {
    var rowSettings = this.rowSettings(group, changedRow);
    var $changedRow = $(changedRow);
    var sourceRow = void 0;
    var $previousRow = void 0;
    var previousRow = void 0;
    var useSibling = void 0;

    if (rowSettings.relationship === 'self' || rowSettings.relationship === 'group') {
      sourceRow = changedRow;
    } else if (rowSettings.relationship === 'sibling') {
        $previousRow = $changedRow.prev('tr:first-of-type');
        previousRow = $previousRow.get(0);
        var $nextRow = $changedRow.next('tr:first-of-type');
        var nextRow = $nextRow.get(0);
        sourceRow = changedRow;
        if ($previousRow.is('.draggable') && $previousRow.find('.' + group).length) {
          if (this.indentEnabled) {
            if ($previousRow.find('.js-indentations').length === $changedRow.find('.js-indentations').length) {
              sourceRow = previousRow;
            }
          } else {
            sourceRow = previousRow;
          }
        } else if ($nextRow.is('.draggable') && $nextRow.find('.' + group).length) {
          if (this.indentEnabled) {
            if ($nextRow.find('.js-indentations').length === $changedRow.find('.js-indentations').length) {
              sourceRow = nextRow;
            }
          } else {
            sourceRow = nextRow;
          }
        }
      } else if (rowSettings.relationship === 'parent') {
          $previousRow = $changedRow.prev('tr');
          previousRow = $previousRow;
          while ($previousRow.length && $previousRow.find('.js-indentation').length >= this.rowObject.indents) {
            $previousRow = $previousRow.prev('tr');
            previousRow = $previousRow;
          }

          if ($previousRow.length) {
            sourceRow = $previousRow.get(0);
          } else {
              sourceRow = $(this.table).find('tr.draggable:first-of-type').get(0);
              if (sourceRow === this.rowObject.element) {
                sourceRow = $(this.rowObject.group[this.rowObject.group.length - 1]).next('tr.draggable').get(0);
              }
              useSibling = true;
            }
        }

    this.copyDragClasses(sourceRow, changedRow, group);
    rowSettings = this.rowSettings(group, changedRow);

    if (useSibling) {
      rowSettings.relationship = 'sibling';
      rowSettings.source = rowSettings.target;
    }

    var targetClass = '.' + rowSettings.target;
    var targetElement = $changedRow.find(targetClass).get(0);

    if (targetElement) {
      var sourceClass = '.' + rowSettings.source;
      var sourceElement = $(sourceClass, sourceRow).get(0);
      switch (rowSettings.action) {
        case 'depth':
          targetElement.value = $(sourceElement).closest('tr').find('.js-indentation').length;
          break;

        case 'match':
          targetElement.value = sourceElement.value;
          break;

        case 'order':
          {
            var siblings = this.rowObject.findSiblings(rowSettings);
            if ($(targetElement).is('select')) {
              var values = [];
              $(targetElement).find('option').each(function () {
                values.push(this.value);
              });
              var maxVal = values[values.length - 1];

              $(siblings).find(targetClass).each(function () {
                if (values.length > 0) {
                  this.value = values.shift();
                } else {
                  this.value = maxVal;
                }
              });
            } else {
              var weight = parseInt($(siblings[0]).find(targetClass).val(), 10) || 0;
              $(siblings).find(targetClass).each(function () {
                this.value = weight;
                weight++;
              });
            }
            break;
          }
      }
    }
  };

  Drupal.tableDrag.prototype.copyDragClasses = function (sourceRow, targetRow, group) {
    var sourceElement = $(sourceRow).find('.' + group);
    var targetElement = $(targetRow).find('.' + group);
    if (sourceElement.length && targetElement.length) {
      targetElement[0].className = sourceElement[0].className;
    }
  };

  Drupal.tableDrag.prototype.checkScroll = function (cursorY) {
    var de = document.documentElement;
    var b = document.body;

    var windowHeight = window.innerHeight || (de.clientHeight && de.clientWidth !== 0 ? de.clientHeight : b.offsetHeight);
    this.windowHeight = windowHeight;
    var scrollY = void 0;
    if (document.all) {
      scrollY = !de.scrollTop ? b.scrollTop : de.scrollTop;
    } else {
      scrollY = window.pageYOffset ? window.pageYOffset : window.scrollY;
    }
    this.scrollY = scrollY;
    var trigger = this.scrollSettings.trigger;
    var delta = 0;

    if (cursorY - scrollY > windowHeight - trigger) {
      delta = trigger / (windowHeight + scrollY - cursorY);
      delta = delta > 0 && delta < trigger ? delta : trigger;
      return delta * this.scrollSettings.amount;
    } else if (cursorY - scrollY < trigger) {
      delta = trigger / (cursorY - scrollY);
      delta = delta > 0 && delta < trigger ? delta : trigger;
      return -delta * this.scrollSettings.amount;
    }
  };

  Drupal.tableDrag.prototype.setScroll = function (scrollAmount) {
    var self = this;

    this.scrollInterval = setInterval(function () {
      self.checkScroll(self.currentPointerCoords.y);
      var aboveTable = self.scrollY > self.table.topY;
      var belowTable = self.scrollY + self.windowHeight < self.table.bottomY;
      if (scrollAmount > 0 && belowTable || scrollAmount < 0 && aboveTable) {
        window.scrollBy(0, scrollAmount);
      }
    }, this.scrollSettings.interval);
  };

  Drupal.tableDrag.prototype.restripeTable = function () {
    $(this.table).find('> tbody > tr.draggable, > tr.draggable').filter(':visible').filter(':odd').removeClass('odd').addClass('even').end().filter(':even').removeClass('even').addClass('odd');
  };

  Drupal.tableDrag.prototype.onDrag = function () {
    return null;
  };

  Drupal.tableDrag.prototype.onDrop = function () {
    return null;
  };

  Drupal.tableDrag.prototype.row = function (tableRow, method, indentEnabled, maxDepth, addClasses) {
    var $tableRow = $(tableRow);

    this.element = tableRow;
    this.method = method;
    this.group = [tableRow];
    this.groupDepth = $tableRow.find('.js-indentation').length;
    this.changed = false;
    this.table = $tableRow.closest('table')[0];
    this.indentEnabled = indentEnabled;
    this.maxDepth = maxDepth;

    this.direction = '';
    if (this.indentEnabled) {
      this.indents = $tableRow.find('.js-indentation').length;
      this.children = this.findChildren(addClasses);
      this.group = $.merge(this.group, this.children);

      for (var n = 0; n < this.group.length; n++) {
        this.groupDepth = Math.max($(this.group[n]).find('.js-indentation').length, this.groupDepth);
      }
    }
  };

  Drupal.tableDrag.prototype.row.prototype.findChildren = function (addClasses) {
    var parentIndentation = this.indents;
    var currentRow = $(this.element, this.table).next('tr.draggable');
    var rows = [];
    var child = 0;

    function rowIndentation(indentNum, el) {
      var self = $(el);
      if (child === 1 && indentNum === parentIndentation) {
        self.addClass('tree-child-first');
      }
      if (indentNum === parentIndentation) {
        self.addClass('tree-child');
      } else if (indentNum > parentIndentation) {
        self.addClass('tree-child-horizontal');
      }
    }

    while (currentRow.length) {
      if (currentRow.find('.js-indentation').length > parentIndentation) {
        child++;
        rows.push(currentRow[0]);
        if (addClasses) {
          currentRow.find('.js-indentation').each(rowIndentation);
        }
      } else {
        break;
      }
      currentRow = currentRow.next('tr.draggable');
    }
    if (addClasses && rows.length) {
      $(rows[rows.length - 1]).find('.js-indentation:nth-child(' + (parentIndentation + 1) + ')').addClass('tree-child-last');
    }
    return rows;
  };

  Drupal.tableDrag.prototype.row.prototype.isValidSwap = function (row) {
    var $row = $(row);
    if (this.indentEnabled) {
      var prevRow = void 0;
      var nextRow = void 0;
      if (this.direction === 'down') {
        prevRow = row;
        nextRow = $row.next('tr').get(0);
      } else {
        prevRow = $row.prev('tr').get(0);
        nextRow = row;
      }
      this.interval = this.validIndentInterval(prevRow, nextRow);

      if (this.interval.min > this.interval.max) {
        return false;
      }
    }

    if (this.table.tBodies[0].rows[0] === row && $row.is(':not(.draggable)')) {
      return false;
    }

    return true;
  };

  Drupal.tableDrag.prototype.row.prototype.swap = function (position, row) {
    this.group.forEach(function (row) {
      Drupal.detachBehaviors(row, drupalSettings, 'move');
    });
    $(row)[position](this.group);

    this.group.forEach(function (row) {
      Drupal.attachBehaviors(row, drupalSettings);
    });
    this.changed = true;
    this.onSwap(row);
  };

  Drupal.tableDrag.prototype.row.prototype.validIndentInterval = function (prevRow, nextRow) {
    var $prevRow = $(prevRow);
    var maxIndent = void 0;

    var minIndent = nextRow ? $(nextRow).find('.js-indentation').length : 0;

    if (!prevRow || $prevRow.is(':not(.draggable)') || $(this.element).is('.tabledrag-root')) {
      maxIndent = 0;
    } else {
      maxIndent = $prevRow.find('.js-indentation').length + ($prevRow.is('.tabledrag-leaf') ? 0 : 1);

      if (this.maxDepth) {
        maxIndent = Math.min(maxIndent, this.maxDepth - (this.groupDepth - this.indents));
      }
    }

    return { min: minIndent, max: maxIndent };
  };

  Drupal.tableDrag.prototype.row.prototype.indent = function (indentDiff) {
    var $group = $(this.group);

    if (!this.interval) {
      var prevRow = $(this.element).prev('tr').get(0);
      var nextRow = $group.eq(-1).next('tr').get(0);
      this.interval = this.validIndentInterval(prevRow, nextRow);
    }

    var indent = this.indents + indentDiff;
    indent = Math.max(indent, this.interval.min);
    indent = Math.min(indent, this.interval.max);
    indentDiff = indent - this.indents;

    for (var n = 1; n <= Math.abs(indentDiff); n++) {
      if (indentDiff < 0) {
        $group.find('.js-indentation:first-of-type').remove();
        this.indents--;
      } else {
        $group.find('td:first-of-type').prepend(Drupal.theme('tableDragIndentation'));
        this.indents++;
      }
    }
    if (indentDiff) {
      this.changed = true;
      this.groupDepth += indentDiff;
      this.onIndent();
    }

    return indentDiff;
  };

  Drupal.tableDrag.prototype.row.prototype.findSiblings = function (rowSettings) {
    var siblings = [];
    var directions = ['prev', 'next'];
    var rowIndentation = this.indents;
    var checkRowIndentation = void 0;
    for (var d = 0; d < directions.length; d++) {
      var checkRow = $(this.element)[directions[d]]();
      while (checkRow.length) {
        if (checkRow.find('.' + rowSettings.target)) {
          if (this.indentEnabled) {
            checkRowIndentation = checkRow.find('.js-indentation').length;
          }

          if (!this.indentEnabled || checkRowIndentation === rowIndentation) {
            siblings.push(checkRow[0]);
          } else if (checkRowIndentation < rowIndentation) {
            break;
          }
        } else {
          break;
        }
        checkRow = checkRow[directions[d]]();
      }

      if (directions[d] === 'prev') {
        siblings.reverse();
        siblings.push(this.element);
      }
    }
    return siblings;
  };

  Drupal.tableDrag.prototype.row.prototype.removeIndentClasses = function () {
    var _this5 = this;

    Object.keys(this.children || {}).forEach(function (n) {
      $(_this5.children[n]).find('.js-indentation').removeClass('tree-child').removeClass('tree-child-first').removeClass('tree-child-last').removeClass('tree-child-horizontal');
    });
  };

  Drupal.tableDrag.prototype.row.prototype.markChanged = function () {
    var marker = Drupal.theme('tableDragChangedMarker');
    var cell = $(this.element).find('td:first-of-type');
    if (cell.find('abbr.tabledrag-changed').length === 0) {
      cell.append(marker);
    }
  };

  Drupal.tableDrag.prototype.row.prototype.onIndent = function () {
    return null;
  };

  Drupal.tableDrag.prototype.row.prototype.onSwap = function (swappedRow) {
    return null;
  };

  $.extend(Drupal.theme, {
    tableDragChangedMarker: function tableDragChangedMarker() {
      return '<abbr class="warning tabledrag-changed" title="' + Drupal.t('Changed') + '">*</abbr>';
    },
    tableDragIndentation: function tableDragIndentation() {
      return '<div class="js-indentation indentation">&nbsp;</div>';
    },
    tableDragChangedWarning: function tableDragChangedWarning() {
      return '<div class="tabledrag-changed-warning messages messages--warning" role="alert">' + Drupal.theme('tableDragChangedMarker') + ' ' + Drupal.t('You have unsaved changes.') + '</div>';
    }
  });
})(jQuery, Drupal, drupalSettings);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhYmxlZHJhZy5lczYuanMiXSwibmFtZXMiOlsiJCIsIkRydXBhbCIsImRydXBhbFNldHRpbmdzIiwic2hvd1dlaWdodCIsIkpTT04iLCJwYXJzZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJiZWhhdmlvcnMiLCJ0YWJsZURyYWciLCJhdHRhY2giLCJjb250ZXh0Iiwic2V0dGluZ3MiLCJpbml0VGFibGVEcmFnIiwidGFibGUiLCJiYXNlIiwibGVuZ3RoIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJmaW5kIiwib25jZSIsInRhYmxlU2V0dGluZ3MiLCJzZWxmIiwiJHRhYmxlIiwiZHJhZ09iamVjdCIsInJvd09iamVjdCIsIm9sZFJvd0VsZW1lbnQiLCJvbGRZIiwiY2hhbmdlZCIsIm1heERlcHRoIiwicnRsIiwiY3NzIiwic3RyaXBpbmciLCJkYXRhIiwic2Nyb2xsU2V0dGluZ3MiLCJhbW91bnQiLCJpbnRlcnZhbCIsInRyaWdnZXIiLCJzY3JvbGxJbnRlcnZhbCIsInNjcm9sbFkiLCJ3aW5kb3dIZWlnaHQiLCJpbmRlbnRFbmFibGVkIiwiZ3JvdXAiLCJuIiwicmVsYXRpb25zaGlwIiwibGltaXQiLCJpbmRlbnRDb3VudCIsImluZGVudCIsInRoZW1lIiwidGVzdFJvdyIsImFkZENsYXNzIiwiYXBwZW5kVG8iLCJ0ZXN0Q2VsbCIsInByZXBlbmQiLCIkaW5kZW50YXRpb24iLCJpbmRlbnRBbW91bnQiLCJnZXQiLCJvZmZzZXRMZWZ0IiwicmVtb3ZlIiwiZWFjaCIsIm1ha2VEcmFnZ2FibGUiLCJiZWZvcmUiLCJhdHRyIiwidCIsIm9uIiwicHJveHkiLCJlIiwicHJldmVudERlZmF1bHQiLCJ0b2dnbGVDb2x1bW5zIiwid3JhcCIsInBhcmVudCIsImluaXRDb2x1bW5zIiwiZG9jdW1lbnQiLCJkcmFnUm93IiwiZXZlbnQiLCJvcmlnaW5hbEV2ZW50IiwidG91Y2hlcyIsImRyb3BSb3ciLCJ3aW5kb3ciLCJrZXkiLCJuZXdWYWx1ZSIsImRpc3BsYXlDb2x1bW5zIiwicHJvdG90eXBlIiwiaGlkZGVuIiwiY2VsbCIsImNvbHVtbkluZGV4Iiwic29tZSIsInRhYmxlU2V0dGluZyIsImZpZWxkIiwidGFyZ2V0IiwiZXEiLCJjbG9zZXN0IiwiaW5kZXgiLCJhZGRDb2xzcGFuQ2xhc3MiLCIkcm93IiwiY2VsbHMiLCJjaGlsZHJlbiIsImNvbFNwYW4iLCJmaWx0ZXIiLCJkaXNwbGF5V2VpZ2h0Iiwic2hvd0NvbHVtbnMiLCJoaWRlQ29sdW1ucyIsImZpbmRPbmNlIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCIkdGFibGVzIiwidGV4dCIsInJvd1NldHRpbmdzIiwicm93IiwidGFibGVTZXR0aW5nc0dyb3VwIiwibWFwIiwiZGVsdGEiLCJpcyIsIml0ZW0iLCIkaXRlbSIsImhhbmRsZSIsIiRpbmRlbnRhdGlvbkxhc3QiLCJhZnRlciIsIk1hdGgiLCJtYXgiLCJ0eXBlIiwiZHJhZ1N0YXJ0Iiwic2FmZUJsdXIiLCJrZXlDb2RlIiwia2V5Q2hhbmdlIiwiZ3JvdXBIZWlnaHQiLCIkcHJldmlvdXNSb3ciLCJlbGVtZW50IiwicHJldiIsInByZXZpb3VzUm93IiwiZGlyZWN0aW9uIiwib2Zmc2V0SGVpZ2h0Iiwic3dhcCIsInNjcm9sbEJ5IiwidEJvZGllcyIsInJvd3MiLCJwYXJzZUludCIsIiRuZXh0Um93IiwibmV4dCIsIm5leHRSb3ciLCJuZXh0R3JvdXAiLCJuZXh0R3JvdXBSb3ciLCJyZW1vdmVDbGFzcyIsInJlc3RyaXBlVGFibGUiLCJvbkRyYWciLCJpbml0T2Zmc2V0IiwiZ2V0UG9pbnRlck9mZnNldCIsImluaXRQb2ludGVyQ29vcmRzIiwicG9pbnRlckNvb3JkcyIsImluZGVudFBvaW50ZXJQb3MiLCJ0b3BZIiwib2Zmc2V0IiwidG9wIiwiYm90dG9tWSIsImN1cnJlbnRQb2ludGVyQ29vcmRzIiwieSIsIngiLCJzY3JvbGxBbW91bnQiLCJjaGVja1Njcm9sbCIsImNsZWFySW50ZXJ2YWwiLCJzZXRTY3JvbGwiLCJjdXJyZW50Um93IiwiZmluZERyb3BUYXJnZXRSb3ciLCJ4RGlmZiIsImluZGVudERpZmYiLCJyb3VuZCIsImluZGVudENoYW5nZSIsImluZGVudHMiLCJkcm9wcGVkUm93IiwiJGRyb3BwZWRSb3ciLCJ1cGRhdGVGaWVsZHMiLCJ1cGRhdGVGaWVsZCIsIm1hcmtDaGFuZ2VkIiwiaW5zZXJ0QmVmb3JlIiwiaGlkZSIsImZhZGVJbiIsInJlbW92ZUluZGVudENsYXNzZXMiLCJvbkRyb3AiLCJwYWdlWCIsInBhZ2VZIiwiY2xpZW50WCIsImJvZHkiLCJzY3JvbGxMZWZ0IiwiY2xpZW50TGVmdCIsImNsaWVudFkiLCJzY3JvbGxUb3AiLCJjbGllbnRUb3AiLCJkb2NQb3MiLCJwb2ludGVyUG9zIiwibGVmdCIsIm5vdCIsInJvd1kiLCJyb3dIZWlnaHQiLCJmaXJzdENoaWxkIiwiZXZlcnkiLCJvIiwiaXNWYWxpZFN3YXAiLCJjaGFuZ2VkUm93IiwiJGNoYW5nZWRSb3ciLCJzb3VyY2VSb3ciLCJ1c2VTaWJsaW5nIiwiY29weURyYWdDbGFzc2VzIiwic291cmNlIiwidGFyZ2V0Q2xhc3MiLCJ0YXJnZXRFbGVtZW50Iiwic291cmNlQ2xhc3MiLCJzb3VyY2VFbGVtZW50IiwiYWN0aW9uIiwidmFsdWUiLCJzaWJsaW5ncyIsImZpbmRTaWJsaW5ncyIsInZhbHVlcyIsInB1c2giLCJtYXhWYWwiLCJzaGlmdCIsIndlaWdodCIsInZhbCIsInRhcmdldFJvdyIsImNsYXNzTmFtZSIsImN1cnNvclkiLCJkZSIsImRvY3VtZW50RWxlbWVudCIsImIiLCJpbm5lckhlaWdodCIsImNsaWVudEhlaWdodCIsImNsaWVudFdpZHRoIiwiYWxsIiwicGFnZVlPZmZzZXQiLCJzZXRJbnRlcnZhbCIsImFib3ZlVGFibGUiLCJiZWxvd1RhYmxlIiwiZW5kIiwidGFibGVSb3ciLCJtZXRob2QiLCJhZGRDbGFzc2VzIiwiJHRhYmxlUm93IiwiZ3JvdXBEZXB0aCIsImZpbmRDaGlsZHJlbiIsIm1lcmdlIiwicGFyZW50SW5kZW50YXRpb24iLCJjaGlsZCIsInJvd0luZGVudGF0aW9uIiwiaW5kZW50TnVtIiwiZWwiLCJwcmV2Um93IiwidmFsaWRJbmRlbnRJbnRlcnZhbCIsIm1pbiIsInBvc2l0aW9uIiwiZGV0YWNoQmVoYXZpb3JzIiwiYXR0YWNoQmVoYXZpb3JzIiwib25Td2FwIiwiJHByZXZSb3ciLCJtYXhJbmRlbnQiLCJtaW5JbmRlbnQiLCIkZ3JvdXAiLCJhYnMiLCJvbkluZGVudCIsImRpcmVjdGlvbnMiLCJjaGVja1Jvd0luZGVudGF0aW9uIiwiZCIsImNoZWNrUm93IiwicmV2ZXJzZSIsIm1hcmtlciIsImFwcGVuZCIsInN3YXBwZWRSb3ciLCJleHRlbmQiLCJ0YWJsZURyYWdDaGFuZ2VkTWFya2VyIiwidGFibGVEcmFnSW5kZW50YXRpb24iLCJ0YWJsZURyYWdDaGFuZ2VkV2FybmluZyIsImpRdWVyeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFXQyxXQUFVQSxDQUFWLEVBQWFDLE1BQWIsRUFBcUJDLGNBQXJCLEVBQXFDO0FBTXBDLE1BQUlDLGFBQWFDLEtBQUtDLEtBQUwsQ0FBV0MsYUFBYUMsT0FBYixDQUFxQiw2QkFBckIsQ0FBWCxDQUFqQjs7QUFnQkFOLFNBQU9PLFNBQVAsQ0FBaUJDLFNBQWpCLEdBQTZCO0FBQzNCQyxVQUQyQixrQkFDcEJDLE9BRG9CLEVBQ1hDLFFBRFcsRUFDRDtBQUN4QixlQUFTQyxhQUFULENBQXVCQyxLQUF2QixFQUE4QkMsSUFBOUIsRUFBb0M7QUFDbEMsWUFBSUQsTUFBTUUsTUFBVixFQUFrQjtBQUdoQmYsaUJBQU9RLFNBQVAsQ0FBaUJNLElBQWpCLElBQXlCLElBQUlkLE9BQU9RLFNBQVgsQ0FBcUJLLE1BQU0sQ0FBTixDQUFyQixFQUErQkYsU0FBU0gsU0FBVCxDQUFtQk0sSUFBbkIsQ0FBL0IsQ0FBekI7QUFDRDtBQUNGOztBQUVERSxhQUFPQyxJQUFQLENBQVlOLFNBQVNILFNBQVQsSUFBc0IsRUFBbEMsRUFBc0NVLE9BQXRDLENBQThDLFVBQUNKLElBQUQsRUFBVTtBQUN0REYsc0JBQWNiLEVBQUVX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QXRCK0MscUNBc0JyQjtBQUN4QixpR0FBeUY1USxPQUFPZ0QsS0FBUCxDQUFhLHdCQUFiLENBQXpGLFNBQW1JaEQsT0FBTytELENBQVAsQ0FBUywyQkFBVCxDQUFuSTtBQUNEO0FBeEI4QyxHQUFqRDtBQTBCRCxDQXAvQ0EsRUFvL0NDOE0sTUFwL0NELEVBby9DUzdRLE1BcC9DVCxFQW8vQ2lCQyxjQXAvQ2pCLENBQUQiLCJmaWxlIjoidGFibGVkcmFnLmVzNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVcbiAqIFByb3ZpZGUgZHJhZ2dpbmcgY2FwYWJpbGl0aWVzIHRvIGFkbWluIHVpcy5cbiAqL1xuXG4vKipcbiAqIFRyaWdnZXJzIHdoZW4gd2VpZ2h0cyBjb2x1bW5zIGFyZSB0b2dnbGVkLlxuICpcbiAqIEBldmVudCBjb2x1bW5zY2hhbmdlXG4gKi9cblxuKGZ1bmN0aW9uICgkLCBEcnVwYWwsIGRydXBhbFNldHRpbmdzKSB7XG4gIC8qKlxuICAgKiBTdG9yZSB0aGUgc3RhdGUgb2Ygd2VpZ2h0IGNvbHVtbnMgZGlzcGxheSBmb3IgYWxsIHRhYmxlcy5cbiAgICpcbiAgICogRGVmYXVsdCB2YWx1ZSBpcyB0byBoaWRlIHdlaWdodCBjb2x1bW5zLlxuICAgKi9cbiAgbGV0IHNob3dXZWlnaHQgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdEcnVwYWwudGFibGVEcmFnLnNob3dXZWlnaHQnKSk7XG5cbiAgLyoqXG4gICAqIERyYWcgYW5kIGRyb3AgdGFibGUgcm93cyB3aXRoIGZpZWxkIG1hbmlwdWxhdGlvbi5cbiAgICpcbiAgICogVXNpbmcgdGhlIGRydXBhbF9hdHRhY2hfdGFibGVkcmFnKCkgZnVuY3Rpb24sIGFueSB0YWJsZSB3aXRoIHdlaWdodHMgb3JcbiAgICogcGFyZW50IHJlbGF0aW9uc2hpcHMgbWF5IGJlIG1hZGUgaW50byBkcmFnZ2FibGUgdGFibGVzLiBDb2x1bW5zIGNvbnRhaW5pbmdcbiAgICogYSBmaWVsZCBtYXkgb3B0aW9uYWxseSBiZSBoaWRkZW4sIHByb3ZpZGluZyBhIGJldHRlciB1c2VyIGV4cGVyaWVuY2UuXG4gICAqXG4gICAqIENyZWF0ZWQgdGFibGVEcmFnIGluc3RhbmNlcyBtYXkgYmUgbW9kaWZpZWQgd2l0aCBjdXN0b20gYmVoYXZpb3JzIGJ5XG4gICAqIG92ZXJyaWRpbmcgdGhlIC5vbkRyYWcsIC5vbkRyb3AsIC5yb3cub25Td2FwLCBhbmQgLnJvdy5vbkluZGVudCBtZXRob2RzLlxuICAgKiBTZWUgYmxvY2tzLmpzIGZvciBhbiBleGFtcGxlIG9mIGFkZGluZyBhZGRpdGlvbmFsIGZ1bmN0aW9uYWxpdHkgdG9cbiAgICogdGFibGVEcmFnLlxuICAgKlxuICAgKiBAdHlwZSB7RHJ1cGFsfmJlaGF2aW9yfVxuICAgKi9cbiAgRHJ1cGFsLmJlaGF2aW9ycy50YWJsZURyYWcgPSB7XG4gICAgYXR0YWNoKGNvbnRleHQsIHNldHRpbmdzKSB7XG4gICAgICBmdW5jdGlvbiBpbml0VGFibGVEcmFnKHRhYmxlLCBiYXNlKSB7XG4gICAgICAgIGlmICh0YWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAvLyBDcmVhdGUgdGhlIG5ldyB0YWJsZURyYWcgaW5zdGFuY2UuIFNhdmUgaW4gdGhlIERydXBhbCB2YXJpYWJsZVxuICAgICAgICAgIC8vIHRvIGFsbG93IG90aGVyIHNjcmlwdHMgYWNjZXNzIHRvIHRoZSBvYmplY3QuXG4gICAgICAgICAgRHJ1cGFsLnRhYmxlRHJhZ1tiYXNlXSA9IG5ldyBEcnVwYWwudGFibGVEcmFnKHRhYmxlWzBdLCBzZXR0aW5ncy50YWJsZURyYWdbYmFzZV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5rZXlzKHNldHRpbmdzLnRhYmxlRHJhZyB8fCB7fSkuZm9yRWFjaCgoYmFzZSkgPT4ge1xuICAgICAgICBpbml0VGFibGVEcmFnKCQoY29udGV4dCkuZmluZChgIyR7YmFzZX1gKS5vbmNlKCd0YWJsZWRyYWcnKSwgYmFzZSk7XG4gICAgICB9KTtcbiAgICB9LFxuICB9O1xuXG4gIC8qKlxuICAgKiBQcm92aWRlcyB0YWJsZSBhbmQgZmllbGQgbWFuaXB1bGF0aW9uLlxuICAgKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFibGVcbiAgICogICBET00gb2JqZWN0IGZvciB0aGUgdGFibGUgdG8gYmUgbWFkZSBkcmFnZ2FibGUuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSB0YWJsZVNldHRpbmdzXG4gICAqICAgU2V0dGluZ3MgZm9yIHRoZSB0YWJsZSBhZGRlZCB2aWEgZHJ1cGFsX2FkZF9kcmFndGFibGUoKS5cbiAgICovXG4gIERydXBhbC50YWJsZURyYWcgPSBmdW5jdGlvbiAodGFibGUsIHRhYmxlU2V0dGluZ3MpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBjb25zdCAkdGFibGUgPSAkKHRhYmxlKTtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtqUXVlcnl9XG4gICAgICovXG4gICAgdGhpcy4kdGFibGUgPSAkKHRhYmxlKTtcblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHR5cGUge0hUTUxFbGVtZW50fVxuICAgICAqL1xuICAgIHRoaXMudGFibGUgPSB0YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICovXG4gICAgdGhpcy50YWJsZVNldHRpbmdzID0gdGFibGVTZXR0aW5ncztcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gaG9sZCBpbmZvcm1hdGlvbiBhYm91dCBhIGN1cnJlbnQgZHJhZyBvcGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAdHlwZSB7P0hUTUxFbGVtZW50fVxuICAgICAqL1xuICAgIHRoaXMuZHJhZ09iamVjdCA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBQcm92aWRlcyBvcGVyYXRpb25zIGZvciByb3cgbWFuaXB1bGF0aW9uLlxuICAgICAqXG4gICAgICogQHR5cGUgez9IVE1MRWxlbWVudH1cbiAgICAgKi9cbiAgICB0aGlzLnJvd09iamVjdCA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBSZW1lbWJlciB0aGUgcHJldmlvdXMgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHs/SFRNTEVsZW1lbnR9XG4gICAgICovXG4gICAgdGhpcy5vbGRSb3dFbGVtZW50ID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gZGV0ZXJtaW5lIHVwIG9yIGRvd24gZGlyZWN0aW9uIGZyb20gbGFzdCBtb3VzZSBtb3ZlLlxuICAgICAqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLm9sZFkgPSAwO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBhbnl0aGluZyBpbiB0aGUgZW50aXJlIHRhYmxlIGhhcyBjaGFuZ2VkLlxuICAgICAqXG4gICAgICogQHR5cGUge2Jvb2x9XG4gICAgICovXG4gICAgdGhpcy5jaGFuZ2VkID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBNYXhpbXVtIGFtb3VudCBvZiBhbGxvd2VkIHBhcmVudGluZy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5tYXhEZXB0aCA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBEaXJlY3Rpb24gb2YgdGhlIHRhYmxlLlxuICAgICAqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnJ0bCA9ICQodGhpcy50YWJsZSkuY3NzKCdkaXJlY3Rpb24nKSA9PT0gJ3J0bCcgPyAtMSA6IDE7XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEB0eXBlIHtib29sfVxuICAgICAqL1xuICAgIHRoaXMuc3RyaXBpbmcgPSAkKHRoaXMudGFibGUpLmRhdGEoJ3N0cmlwaW5nJykgPT09IDE7XG5cbiAgICAvKipcbiAgICAgKiBDb25maWd1cmUgdGhlIHNjcm9sbCBzZXR0aW5ncy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICpcbiAgICAgKiBAcHJvcCB7bnVtYmVyfSBhbW91bnRcbiAgICAgKiBAcHJvcCB7bnVtYmVyfSBpbnRlcnZhbFxuICAgICAqIEBwcm9wIHtudW1iZXJ9IHRyaWdnZXJcbiAgICAgKi9cbiAgICB0aGlzLnNjcm9sbFNldHRpbmdzID0geyBhbW91bnQ6IDQsIGludGVydmFsOiA1MCwgdHJpZ2dlcjogNzAgfTtcblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHR5cGUgez9udW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5zY3JvbGxJbnRlcnZhbCA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5zY3JvbGxZID0gMDtcblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLndpbmRvd0hlaWdodCA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayB0aGlzIHRhYmxlJ3Mgc2V0dGluZ3MgZm9yIHBhcmVudCByZWxhdGlvbnNoaXBzLlxuICAgICAqXG4gICAgICogRm9yIGVmZmljaWVuY3ksIGxhcmdlIHNlY3Rpb25zIG9mIGNvZGUgY2FuIGJlIHNraXBwZWQgaWYgd2UgZG9uJ3QgbmVlZCB0b1xuICAgICAqIHRyYWNrIGhvcml6b250YWwgbW92ZW1lbnQgYW5kIGluZGVudGF0aW9ucy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtib29sfVxuICAgICAqL1xuICAgIHRoaXMuaW5kZW50RW5hYmxlZCA9IGZhbHNlO1xuICAgIE9iamVjdC5rZXlzKHRhYmxlU2V0dGluZ3MgfHwge30pLmZvckVhY2goKGdyb3VwKSA9PiB7XG4gICAgICBPYmplY3Qua2V5cyh0YWJsZVNldHRpbmdzW2dyb3VwXSB8fCB7fSkuZm9yRWFjaCgobikgPT4ge1xuICAgICAgICBpZiAodGFibGVTZXR0aW5nc1tncm91cF1bbl0ucmVsYXRpb25zaGlwID09PSAncGFyZW50Jykge1xuICAgICAgICAgIHRoaXMuaW5kZW50RW5hYmxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhYmxlU2V0dGluZ3NbZ3JvdXBdW25dLmxpbWl0ID4gMCkge1xuICAgICAgICAgIHRoaXMubWF4RGVwdGggPSB0YWJsZVNldHRpbmdzW2dyb3VwXVtuXS5saW1pdDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKHRoaXMuaW5kZW50RW5hYmxlZCkge1xuICAgICAgLyoqXG4gICAgICAgKiBUb3RhbCB3aWR0aCBvZiBpbmRlbnRzLCBzZXQgaW4gbWFrZURyYWdnYWJsZS5cbiAgICAgICAqXG4gICAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAgICovXG4gICAgICB0aGlzLmluZGVudENvdW50ID0gMTtcbiAgICAgIC8vIEZpbmQgdGhlIHdpZHRoIG9mIGluZGVudGF0aW9ucyB0byBtZWFzdXJlIG1vdXNlIG1vdmVtZW50cyBhZ2FpbnN0LlxuICAgICAgLy8gQmVjYXVzZSB0aGUgdGFibGUgZG9lc24ndCBuZWVkIHRvIHN0YXJ0IHdpdGggYW55IGluZGVudGF0aW9ucywgd2VcbiAgICAgIC8vIG1hbnVhbGx5IGFwcGVuZCAyIGluZGVudGF0aW9ucyBpbiB0aGUgZmlyc3QgZHJhZ2dhYmxlIHJvdywgbWVhc3VyZVxuICAgICAgLy8gdGhlIG9mZnNldCwgdGhlbiByZW1vdmUuXG4gICAgICBjb25zdCBpbmRlbnQgPSBEcnVwYWwudGhlbWUoJ3RhYmxlRHJhZ0luZGVudGF0aW9uJyk7XG4gICAgICBjb25zdCB0ZXN0Um93ID0gJCgnPHRyLz4nKS5hZGRDbGFzcygnZHJhZ2dhYmxlJykuYXBwZW5kVG8odGFibGUpO1xuICAgICAgY29uc3QgdGVzdENlbGwgPSAkKCc8dGQvPicpLmFwcGVuZFRvKHRlc3RSb3cpLnByZXBlbmQoaW5kZW50KS5wcmVwZW5kKGluZGVudCk7XG4gICAgICBjb25zdCAkaW5kZW50YXRpb24gPSB0ZXN0Q2VsbC5maW5kKCcuanMtaW5kZW50YXRpb24nKTtcblxuICAgICAgLyoqXG4gICAgICAgKlxuICAgICAgICogQHR5cGUge251bWJlcn1cbiAgICAgICAqL1xuICAgICAgdGhpcy5pbmRlbnRBbW91bnQgPSAkaW5kZW50YXRpb24uZ2V0KDEpLm9mZnNldExlZnQgLSAkaW5kZW50YXRpb24uZ2V0KDApLm9mZnNldExlZnQ7XG4gICAgICB0ZXN0Um93LnJlbW92ZSgpO1xuICAgIH1cblxuICAgIC8vIE1ha2UgZWFjaCBhcHBsaWNhYmxlIHJvdyBkcmFnZ2FibGUuXG4gICAgLy8gTWF0Y2ggaW1tZWRpYXRlIGNoaWxkcmVuIG9mIHRoZSBwYXJlbnQgZWxlbWVudCB0byBhbGxvdyBuZXN0aW5nLlxuICAgICR0YWJsZS5maW5kKCc+IHRyLmRyYWdnYWJsZSwgPiB0Ym9keSA+IHRyLmRyYWdnYWJsZScpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi5tYWtlRHJhZ2dhYmxlKHRoaXMpO1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGEgbGluayBiZWZvcmUgdGhlIHRhYmxlIGZvciB1c2VycyB0byBzaG93IG9yIGhpZGUgd2VpZ2h0IGNvbHVtbnMuXG4gICAgJHRhYmxlLmJlZm9yZSgkKCc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImxpbmsgdGFibGVkcmFnLXRvZ2dsZS13ZWlnaHRcIj48L2J1dHRvbj4nKVxuICAgICAgLmF0dHIoJ3RpdGxlJywgRHJ1cGFsLnQoJ1JlLW9yZGVyIHJvd3MgYnkgbnVtZXJpY2FsIHdlaWdodCBpbnN0ZWFkIG9mIGRyYWdnaW5nLicpKVxuICAgICAgLm9uKCdjbGljaycsICQucHJveHkoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLnRvZ2dsZUNvbHVtbnMoKTtcbiAgICAgIH0sIHRoaXMpKVxuICAgICAgLndyYXAoJzxkaXYgY2xhc3M9XCJ0YWJsZWRyYWctdG9nZ2xlLXdlaWdodC13cmFwcGVyXCI+PC9kaXY+JylcbiAgICAgIC5wYXJlbnQoKSxcbiAgICApO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgc3BlY2lmaWVkIGNvbHVtbnMgKGZvciBleGFtcGxlLCB3ZWlnaHQgb3IgcGFyZW50IGNvbHVtbnMpXG4gICAgLy8gdG8gc2hvdyBvciBoaWRlIGFjY29yZGluZyB0byB1c2VyIHByZWZlcmVuY2UuIFRoaXMgYWlkcyBhY2Nlc3NpYmlsaXR5XG4gICAgLy8gc28gdGhhdCwgZS5nLiwgc2NyZWVuIHJlYWRlciB1c2VycyBjYW4gY2hvb3NlIHRvIGVudGVyIHdlaWdodCB2YWx1ZXMgYW5kXG4gICAgLy8gbWFuaXB1bGF0ZSBmb3JtIGVsZW1lbnRzIGRpcmVjdGx5LCByYXRoZXIgdGhhbiB1c2luZyBkcmFnLWFuZC1kcm9wLi5cbiAgICBzZWxmLmluaXRDb2x1bW5zKCk7XG5cbiAgICAvLyBBZGQgZXZlbnQgYmluZGluZ3MgdG8gdGhlIGRvY3VtZW50LiBUaGUgc2VsZiB2YXJpYWJsZSBpcyBwYXNzZWQgYWxvbmdcbiAgICAvLyBhcyBldmVudCBoYW5kbGVycyBkbyBub3QgaGF2ZSBkaXJlY3QgYWNjZXNzIHRvIHRoZSB0YWJsZURyYWcgb2JqZWN0LlxuICAgICQoZG9jdW1lbnQpLm9uKCd0b3VjaG1vdmUnLCBldmVudCA9PiBzZWxmLmRyYWdSb3coZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzWzBdLCBzZWxmKSk7XG4gICAgJChkb2N1bWVudCkub24oJ3RvdWNoZW5kJywgZXZlbnQgPT4gc2VsZi5kcm9wUm93KGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXSwgc2VsZikpO1xuICAgICQoZG9jdW1lbnQpLm9uKCdtb3VzZW1vdmUgcG9pbnRlcm1vdmUnLCBldmVudCA9PiBzZWxmLmRyYWdSb3coZXZlbnQsIHNlbGYpKTtcbiAgICAkKGRvY3VtZW50KS5vbignbW91c2V1cCBwb2ludGVydXAnLCBldmVudCA9PiBzZWxmLmRyb3BSb3coZXZlbnQsIHNlbGYpKTtcblxuICAgIC8vIFJlYWN0IHRvIGxvY2FsU3RvcmFnZSBldmVudCBzaG93aW5nIG9yIGhpZGluZyB3ZWlnaHQgY29sdW1ucy5cbiAgICAkKHdpbmRvdykub24oJ3N0b3JhZ2UnLCAkLnByb3h5KGZ1bmN0aW9uIChlKSB7XG4gICAgICAvLyBPbmx5IHJlYWN0IHRvICdEcnVwYWwudGFibGVEcmFnLnNob3dXZWlnaHQnIHZhbHVlIGNoYW5nZS5cbiAgICAgIGlmIChlLm9yaWdpbmFsRXZlbnQua2V5ID09PSAnRHJ1cGFsLnRhYmxlRHJhZy5zaG93V2VpZ2h0Jykge1xuICAgICAgICAvLyBUaGlzIHdhcyBjaGFuZ2VkIGluIGFub3RoZXIgd2luZG93LCBnZXQgdGhlIG5ldyB2YWx1ZSBmb3IgdGhpc1xuICAgICAgICAvLyB3aW5kb3cuXG4gICAgICAgIHNob3dXZWlnaHQgPSBKU09OLnBhcnNlKGUub3JpZ2luYWxFdmVudC5uZXdWYWx1ZSk7XG4gICAgICAgIHRoaXMuZGlzcGxheUNvbHVtbnMoc2hvd1dlaWdodCk7XG4gICAgICB9XG4gICAgfSwgdGhpcykpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIGNvbHVtbnMgY29udGFpbmluZyBmb3JtIGVsZW1lbnRzIHRvIGJlIGhpZGRlbiBieSBkZWZhdWx0LlxuICAgKlxuICAgKiBJZGVudGlmeSBhbmQgbWFyayBlYWNoIGNlbGwgd2l0aCBhIENTUyBjbGFzcyBzbyB3ZSBjYW4gZWFzaWx5IHRvZ2dsZVxuICAgKiBzaG93L2hpZGUgaXQuIEZpbmFsbHksIGhpZGUgY29sdW1ucyBpZiB1c2VyIGRvZXMgbm90IGhhdmUgYVxuICAgKiAnRHJ1cGFsLnRhYmxlRHJhZy5zaG93V2VpZ2h0JyBsb2NhbFN0b3JhZ2UgdmFsdWUuXG4gICAqL1xuICBEcnVwYWwudGFibGVEcmFnLnByb3RvdHlwZS5pbml0Q29sdW1ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCAkdGFibGUgPSB0aGlzLiR0YWJsZTtcbiAgICBsZXQgaGlkZGVuO1xuICAgIGxldCBjZWxsO1xuICAgIGxldCBjb2x1bW5JbmRleDtcbiAgICBPYmplY3Qua2V5cyh0aGlzLnRhYmxlU2V0dGluZ3MgfHwge30pLmZvckVhY2goKGdyb3VwKSA9PiB7XG4gICAgICAvLyBGaW5kIHRoZSBmaXJzdCBmaWVsZCBpbiB0aGlzIGdyb3VwLlxuICAgICAgT2JqZWN0LmtleXModGhpcy50YWJsZVNldHRpbmdzW2dyb3VwXSkuc29tZSgodGFibGVTZXR0aW5nKSA9PiB7XG4gICAgICAgIGNvbnN0IGZpZWxkID0gJHRhYmxlLmZpbmQoYC4ke3RoaXMudGFibGVTZXR0aW5nc1tncm91cF1bdGFibGVTZXR0aW5nXS50YXJnZXR9YCkuZXEoMCk7XG4gICAgICAgIGlmIChmaWVsZC5sZW5ndGggJiYgdGhpcy50YWJsZVNldHRpbmdzW2dyb3VwXVt0YWJsZVNldHRpbmddLmhpZGRlbikge1xuICAgICAgICAgIGhpZGRlbiA9IHRoaXMudGFibGVTZXR0aW5nc1tncm91cF1bdGFibGVTZXR0aW5nXS5oaWRkZW47XG4gICAgICAgICAgY2VsbCA9IGZpZWxkLmNsb3Nlc3QoJ3RkJyk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIE1hcmsgdGhlIGNvbHVtbiBjb250YWluaW5nIHRoaXMgZmllbGQgc28gaXQgY2FuIGJlIGhpZGRlbi5cbiAgICAgIGlmIChoaWRkZW4gJiYgY2VsbFswXSkge1xuICAgICAgICAvLyBBZGQgMSB0byBvdXIgaW5kZXhlcy4gVGhlIG50aC1jaGlsZCBzZWxlY3RvciBpcyAxIGJhc2VkLCBub3QgMFxuICAgICAgICAvLyBiYXNlZC4gTWF0Y2ggaW1tZWRpYXRlIGNoaWxkcmVuIG9mIHRoZSBwYXJlbnQgZWxlbWVudCB0byBhbGxvd1xuICAgICAgICAvLyBuZXN0aW5nLlxuICAgICAgICBjb2x1bW5JbmRleCA9IGNlbGwucGFyZW50KCkuZmluZCgnPiB0ZCcpLmluZGV4KGNlbGwuZ2V0KDApKSArIDE7XG4gICAgICAgICR0YWJsZS5maW5kKCc+IHRoZWFkID4gdHIsID4gdGJvZHkgPiB0ciwgPiB0cicpLmVhY2godGhpcy5hZGRDb2xzcGFuQ2xhc3MoY29sdW1uSW5kZXgpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmRpc3BsYXlDb2x1bW5zKHNob3dXZWlnaHQpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBNYXJrIGNlbGxzIHRoYXQgaGF2ZSBjb2xzcGFuLlxuICAgKlxuICAgKiBJbiBvcmRlciB0byBhZGp1c3QgdGhlIGNvbHNwYW4gaW5zdGVhZCBvZiBoaWRpbmcgdGhlbSBhbHRvZ2V0aGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gY29sdW1uSW5kZXhcbiAgICogICBUaGUgY29sdW1uIGluZGV4IHRvIGFkZCBjb2xzcGFuIGNsYXNzIHRvLlxuICAgKlxuICAgKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAgICogICBGdW5jdGlvbiB0byBhZGQgY29sc3BhbiBjbGFzcy5cbiAgICovXG4gIERydXBhbC50YWJsZURyYWcucHJvdG90eXBlLmFkZENvbHNwYW5DbGFzcyA9IGZ1bmN0aW9uIChjb2x1bW5JbmRleCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBHZXQgdGhlIGNvbHVtbkluZGV4IGFuZCBhZGp1c3QgZm9yIGFueSBjb2xzcGFucyBpbiB0aGlzIHJvdy5cbiAgICAgIGNvbnN0ICRyb3cgPSAkKHRoaXMpO1xuICAgICAgbGV0IGluZGV4ID0gY29sdW1uSW5kZXg7XG4gICAgICBjb25zdCBjZWxscyA9ICRyb3cuY2hpbGRyZW4oKTtcbiAgICAgIGxldCBjZWxsO1xuICAgICAgY2VsbHMuZWFjaChmdW5jdGlvbiAobikge1xuICAgICAgICBpZiAobiA8IGluZGV4ICYmIHRoaXMuY29sU3BhbiAmJiB0aGlzLmNvbFNwYW4gPiAxKSB7XG4gICAgICAgICAgaW5kZXggLT0gdGhpcy5jb2xTcGFuIC0gMTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgIGNlbGwgPSBjZWxscy5maWx0ZXIoYDpudGgtY2hpbGQoJHtpbmRleH0pYCk7XG4gICAgICAgIGlmIChjZWxsWzBdLmNvbFNwYW4gJiYgY2VsbFswXS5jb2xTcGFuID4gMSkge1xuICAgICAgICAgIC8vIElmIHRoaXMgY2VsbCBoYXMgYSBjb2xzcGFuLCBtYXJrIGl0IHNvIHdlIGNhbiByZWR1Y2UgdGhlIGNvbHNwYW4uXG4gICAgICAgICAgY2VsbC5hZGRDbGFzcygndGFibGVkcmFnLWhhcy1jb2xzcGFuJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgLy8gTWFyayB0aGlzIGNlbGwgc28gd2UgY2FuIGhpZGUgaXQuXG4gICAgICAgICAgY2VsbC5hZGRDbGFzcygndGFibGVkcmFnLWhpZGUnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgLyoqXG4gICAqIEhpZGUgb3IgZGlzcGxheSB3ZWlnaHQgY29sdW1ucy4gVHJpZ2dlcnMgYW4gZXZlbnQgb24gY2hhbmdlLlxuICAgKlxuICAgKiBAZmlyZXMgZXZlbnQ6Y29sdW1uc2NoYW5nZVxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2x9IGRpc3BsYXlXZWlnaHRcbiAgICogICAndHJ1ZScgd2lsbCBzaG93IHdlaWdodCBjb2x1bW5zLlxuICAgKi9cbiAgRHJ1cGFsLnRhYmxlRHJhZy5wcm90b3R5cGUuZGlzcGxheUNvbHVtbnMgPSBmdW5jdGlvbiAoZGlzcGxheVdlaWdodCkge1xuICAgIGlmIChkaXNwbGF5V2VpZ2h0KSB7XG4gICAgICB0aGlzLnNob3dDb2x1bW5zKCk7XG4gICAgfVxuICAgIC8vIERlZmF1bHQgYWN0aW9uIGlzIHRvIGhpZGUgY29sdW1ucy5cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuaGlkZUNvbHVtbnMoKTtcbiAgICB9XG4gICAgLy8gVHJpZ2dlciBhbiBldmVudCB0byBhbGxvdyBvdGhlciBzY3JpcHRzIHRvIHJlYWN0IHRvIHRoaXMgZGlzcGxheSBjaGFuZ2UuXG4gICAgLy8gRm9yY2UgdGhlIGV4dHJhIHBhcmFtZXRlciBhcyBhIGJvb2wuXG4gICAgJCgndGFibGUnKS5maW5kT25jZSgndGFibGVkcmFnJykudHJpZ2dlcignY29sdW1uc2NoYW5nZScsICEhZGlzcGxheVdlaWdodCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFRvZ2dsZSB0aGUgd2VpZ2h0IGNvbHVtbiBkZXBlbmRpbmcgb24gJ3Nob3dXZWlnaHQnIHZhbHVlLlxuICAgKlxuICAgKiBTdG9yZSBvbmx5IGRlZmF1bHQgb3ZlcnJpZGUuXG4gICAqL1xuICBEcnVwYWwudGFibGVEcmFnLnByb3RvdHlwZS50b2dnbGVDb2x1bW5zID0gZnVuY3Rpb24gKCkge1xuICAgIHNob3dXZWlnaHQgPSAhc2hvd1dlaWdodDtcbiAgICB0aGlzLmRpc3BsYXlDb2x1bW5zKHNob3dXZWlnaHQpO1xuICAgIGlmIChzaG93V2VpZ2h0KSB7XG4gICAgICAvLyBTYXZlIGRlZmF1bHQgb3ZlcnJpZGUuXG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnRHJ1cGFsLnRhYmxlRHJhZy5zaG93V2VpZ2h0Jywgc2hvd1dlaWdodCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgLy8gUmVzZXQgdGhlIHZhbHVlIHRvIGl0cyBkZWZhdWx0LlxuICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ0RydXBhbC50YWJsZURyYWcuc2hvd1dlaWdodCcpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogSGlkZSB0aGUgY29sdW1ucyBjb250YWluaW5nIHdlaWdodC9wYXJlbnQgZm9ybSBlbGVtZW50cy5cbiAgICpcbiAgICogVW5kbyBzaG93Q29sdW1ucygpLlxuICAgKi9cbiAgRHJ1cGFsLnRhYmxlRHJhZy5wcm90b3R5cGUuaGlkZUNvbHVtbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgJHRhYmxlcyA9ICQoJ3RhYmxlJykuZmluZE9uY2UoJ3RhYmxlZHJhZycpO1xuICAgIC8vIEhpZGUgd2VpZ2h0L3BhcmVudCBjZWxscyBhbmQgaGVhZGVycy5cbiAgICAkdGFibGVzLmZpbmQoJy50YWJsZWRyYWctaGlkZScpLmNzcygnZGlzcGxheScsICdub25lJyk7XG4gICAgLy8gU2hvdyBUYWJsZURyYWcgaGFuZGxlcy5cbiAgICAkdGFibGVzLmZpbmQoJy50YWJsZWRyYWctaGFuZGxlJykuY3NzKCdkaXNwbGF5JywgJycpO1xuICAgIC8vIFJlZHVjZSB0aGUgY29sc3BhbiBvZiBhbnkgZWZmZWN0ZWQgbXVsdGktc3BhbiBjb2x1bW5zLlxuICAgICR0YWJsZXMuZmluZCgnLnRhYmxlZHJhZy1oYXMtY29sc3BhbicpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5jb2xTcGFuID0gdGhpcy5jb2xTcGFuIC0gMTtcbiAgICB9KTtcbiAgICAvLyBDaGFuZ2UgbGluayB0ZXh0LlxuICAgICQoJy50YWJsZWRyYWctdG9nZ2xlLXdlaWdodCcpLnRleHQoRHJ1cGFsLnQoJ1Nob3cgcm93IHdlaWdodHMnKSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNob3cgdGhlIGNvbHVtbnMgY29udGFpbmluZyB3ZWlnaHQvcGFyZW50IGZvcm0gZWxlbWVudHMuXG4gICAqXG4gICAqIFVuZG8gaGlkZUNvbHVtbnMoKS5cbiAgICovXG4gIERydXBhbC50YWJsZURyYWcucHJvdG90eXBlLnNob3dDb2x1bW5zID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0ICR0YWJsZXMgPSAkKCd0YWJsZScpLmZpbmRPbmNlKCd0YWJsZWRyYWcnKTtcbiAgICAvLyBTaG93IHdlaWdodC9wYXJlbnQgY2VsbHMgYW5kIGhlYWRlcnMuXG4gICAgJHRhYmxlcy5maW5kKCcudGFibGVkcmFnLWhpZGUnKS5jc3MoJ2Rpc3BsYXknLCAnJyk7XG4gICAgLy8gSGlkZSBUYWJsZURyYWcgaGFuZGxlcy5cbiAgICAkdGFibGVzLmZpbmQoJy50YWJsZWRyYWctaGFuZGxlJykuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAvLyBJbmNyZWFzZSB0aGUgY29sc3BhbiBmb3IgYW55IGNvbHVtbnMgd2hlcmUgaXQgd2FzIHByZXZpb3VzbHkgcmVkdWNlZC5cbiAgICAkdGFibGVzLmZpbmQoJy50YWJsZWRyYWctaGFzLWNvbHNwYW4nKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuY29sU3BhbiA9IHRoaXMuY29sU3BhbiArIDE7XG4gICAgfSk7XG4gICAgLy8gQ2hhbmdlIGxpbmsgdGV4dC5cbiAgICAkKCcudGFibGVkcmFnLXRvZ2dsZS13ZWlnaHQnKS50ZXh0KERydXBhbC50KCdIaWRlIHJvdyB3ZWlnaHRzJykpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBGaW5kIHRoZSB0YXJnZXQgdXNlZCB3aXRoaW4gYSBwYXJ0aWN1bGFyIHJvdyBhbmQgZ3JvdXAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBncm91cFxuICAgKiAgIEdyb3VwIHNlbGVjdG9yLlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByb3dcbiAgICogICBUaGUgcm93IEhUTUwgZWxlbWVudC5cbiAgICpcbiAgICogQHJldHVybiB7b2JqZWN0fVxuICAgKiAgIFRoZSB0YWJsZSByb3cgc2V0dGluZ3MuXG4gICAqL1xuICBEcnVwYWwudGFibGVEcmFnLnByb3RvdHlwZS5yb3dTZXR0aW5ncyA9IGZ1bmN0aW9uIChncm91cCwgcm93KSB7XG4gICAgY29uc3QgZmllbGQgPSAkKHJvdykuZmluZChgLiR7Z3JvdXB9YCk7XG4gICAgY29uc3QgdGFibGVTZXR0aW5nc0dyb3VwID0gdGhpcy50YWJsZVNldHRpbmdzW2dyb3VwXTtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGFibGVTZXR0aW5nc0dyb3VwKS5tYXAoKGRlbHRhKSA9PiB7XG4gICAgICBpZiAoZmllbGQuaXMoYC4ke3RhYmxlU2V0dGluZ3NHcm91cFtkZWx0YV0udGFyZ2V0fWApKSB7XG4gICAgICAgIGNvbnN0IHJvd1NldHRpbmdzID0ge307XG4gICAgICAgIE9iamVjdC5rZXlzKHRhYmxlU2V0dGluZ3NHcm91cFtkZWx0YV0pLmZvckVhY2goKG4pID0+IHtcbiAgICAgICAgICByb3dTZXR0aW5nc1tuXSA9IHRhYmxlU2V0dGluZ3NHcm91cFtkZWx0YV1bbl07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcm93U2V0dGluZ3M7XG4gICAgICB9XG4gICAgfSlbMF07XG4gIH07XG5cbiAgLyoqXG4gICAqIFRha2UgYW4gaXRlbSBhbmQgYWRkIGV2ZW50IGhhbmRsZXJzIHRvIG1ha2UgaXQgYmVjb21lIGRyYWdnYWJsZS5cbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gaXRlbVxuICAgKiAgIFRoZSBpdGVtIHRvIGFkZCBldmVudCBoYW5kbGVycyB0by5cbiAgICovXG4gIERydXBhbC50YWJsZURyYWcucHJvdG90eXBlLm1ha2VEcmFnZ2FibGUgPSBmdW5jdGlvbiAoaXRlbSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0ICRpdGVtID0gJChpdGVtKTtcbiAgICAvLyBBZGQgYSBjbGFzcyB0byB0aGUgdGl0bGUgbGluay5cbiAgICAkaXRlbS5maW5kKCd0ZDpmaXJzdC1vZi10eXBlJykuZmluZCgnYScpLmFkZENsYXNzKCdtZW51LWl0ZW1fX2xpbmsnKTtcbiAgICAvLyBDcmVhdGUgdGhlIGhhbmRsZS5cbiAgICBjb25zdCBoYW5kbGUgPSAkKCc8YSBocmVmPVwiI1wiIGNsYXNzPVwidGFibGVkcmFnLWhhbmRsZVwiPjxkaXYgY2xhc3M9XCJoYW5kbGVcIj4mbmJzcDs8L2Rpdj48L2E+JykuYXR0cigndGl0bGUnLCBEcnVwYWwudCgnRHJhZyB0byByZS1vcmRlcicpKTtcbiAgICAvLyBJbnNlcnQgdGhlIGhhbmRsZSBhZnRlciBpbmRlbnRhdGlvbnMgKGlmIGFueSkuXG4gICAgY29uc3QgJGluZGVudGF0aW9uTGFzdCA9ICRpdGVtLmZpbmQoJ3RkOmZpcnN0LW9mLXR5cGUnKS5maW5kKCcuanMtaW5kZW50YXRpb24nKS5lcSgtMSk7XG4gICAgaWYgKCRpbmRlbnRhdGlvbkxhc3QubGVuZ3RoKSB7XG4gICAgICAkaW5kZW50YXRpb25MYXN0LmFmdGVyKGhhbmRsZSk7XG4gICAgICAvLyBVcGRhdGUgdGhlIHRvdGFsIHdpZHRoIG9mIGluZGVudGF0aW9uIGluIHRoaXMgZW50aXJlIHRhYmxlLlxuICAgICAgc2VsZi5pbmRlbnRDb3VudCA9IE1hdGgubWF4KCRpdGVtLmZpbmQoJy5qcy1pbmRlbnRhdGlvbicpLmxlbmd0aCwgc2VsZi5pbmRlbnRDb3VudCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgJGl0ZW0uZmluZCgndGQnKS5lcSgwKS5wcmVwZW5kKGhhbmRsZSk7XG4gICAgfVxuXG4gICAgaGFuZGxlLm9uKCdtb3VzZWRvd24gdG91Y2hzdGFydCBwb2ludGVyZG93bicsIChldmVudCkgPT4ge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGlmIChldmVudC5vcmlnaW5hbEV2ZW50LnR5cGUgPT09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgICBldmVudCA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXTtcbiAgICAgIH1cbiAgICAgIHNlbGYuZHJhZ1N0YXJ0KGV2ZW50LCBzZWxmLCBpdGVtKTtcbiAgICB9KTtcblxuICAgIC8vIFByZXZlbnQgdGhlIGFuY2hvciB0YWcgZnJvbSBqdW1waW5nIHVzIHRvIHRoZSB0b3Agb2YgdGhlIHBhZ2UuXG4gICAgaGFuZGxlLm9uKCdjbGljaycsIChlKSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG5cbiAgICAvLyBTZXQgYmx1ciBjbGVhbnVwIHdoZW4gYSBoYW5kbGUgaXMgZm9jdXNlZC5cbiAgICBoYW5kbGUub24oJ2ZvY3VzJywgKCkgPT4ge1xuICAgICAgc2VsZi5zYWZlQmx1ciA9IHRydWU7XG4gICAgfSk7XG5cbiAgICAvLyBPbiBibHVyLCBmaXJlIHRoZSBzYW1lIGZ1bmN0aW9uIGFzIGEgdG91Y2hlbmQvbW91c2V1cC4gVGhpcyBpcyB1c2VkIHRvXG4gICAgLy8gdXBkYXRlIHZhbHVlcyBhZnRlciBhIHJvdyBoYXMgYmVlbiBtb3ZlZCB0aHJvdWdoIHRoZSBrZXlib2FyZCBzdXBwb3J0LlxuICAgIGhhbmRsZS5vbignYmx1cicsIChldmVudCkgPT4ge1xuICAgICAgaWYgKHNlbGYucm93T2JqZWN0ICYmIHNlbGYuc2FmZUJsdXIpIHtcbiAgICAgICAgc2VsZi5kcm9wUm93KGV2ZW50LCBzZWxmKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEFkZCBhcnJvdy1rZXkgc3VwcG9ydCB0byB0aGUgaGFuZGxlLlxuICAgIGhhbmRsZS5vbigna2V5ZG93bicsIChldmVudCkgPT4ge1xuICAgICAgLy8gSWYgYSByb3dPYmplY3QgZG9lc24ndCB5ZXQgZXhpc3QgYW5kIHRoaXMgaXNuJ3QgdGhlIHRhYiBrZXkuXG4gICAgICBpZiAoZXZlbnQua2V5Q29kZSAhPT0gOSAmJiAhc2VsZi5yb3dPYmplY3QpIHtcbiAgICAgICAgc2VsZi5yb3dPYmplY3QgPSBuZXcgc2VsZi5yb3coaXRlbSwgJ2tleWJvYXJkJywgc2VsZi5pbmRlbnRFbmFibGVkLCBzZWxmLm1heERlcHRoLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgbGV0IGtleUNoYW5nZSA9IGZhbHNlO1xuICAgICAgbGV0IGdyb3VwSGVpZ2h0O1xuXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1mYWxsdGhyb3VnaCAqL1xuXG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgLy8gTGVmdCBhcnJvdy5cbiAgICAgICAgY2FzZSAzNzpcbiAgICAgICAgLy8gU2FmYXJpIGxlZnQgYXJyb3cuXG4gICAgICAgIGNhc2UgNjMyMzQ6XG4gICAgICAgICAga2V5Q2hhbmdlID0gdHJ1ZTtcbiAgICAgICAgICBzZWxmLnJvd09iamVjdC5pbmRlbnQoLTEgKiBzZWxmLnJ0bCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgLy8gVXAgYXJyb3cuXG4gICAgICAgIGNhc2UgMzg6XG4gICAgICAgIC8vIFNhZmFyaSB1cCBhcnJvdy5cbiAgICAgICAgY2FzZSA2MzIzMjoge1xuICAgICAgICAgIGxldCAkcHJldmlvdXNSb3cgPSAkKHNlbGYucm93T2JqZWN0LmVsZW1lbnQpLnByZXYoJ3RyOmZpcnN0LW9mLXR5cGUnKTtcbiAgICAgICAgICBsZXQgcHJldmlvdXNSb3cgPSAkcHJldmlvdXNSb3cuZ2V0KDApO1xuICAgICAgICAgIHdoaWxlIChwcmV2aW91c1JvdyAmJiAkcHJldmlvdXNSb3cuaXMoJzpoaWRkZW4nKSkge1xuICAgICAgICAgICAgJHByZXZpb3VzUm93ID0gJChwcmV2aW91c1JvdykucHJldigndHI6Zmlyc3Qtb2YtdHlwZScpO1xuICAgICAgICAgICAgcHJldmlvdXNSb3cgPSAkcHJldmlvdXNSb3cuZ2V0KDApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHJldmlvdXNSb3cpIHtcbiAgICAgICAgICAgIC8vIERvIG5vdCBhbGxvdyB0aGUgb25CbHVyIGNsZWFudXAuXG4gICAgICAgICAgICBzZWxmLnNhZmVCbHVyID0gZmFsc2U7XG4gICAgICAgICAgICBzZWxmLnJvd09iamVjdC5kaXJlY3Rpb24gPSAndXAnO1xuICAgICAgICAgICAga2V5Q2hhbmdlID0gdHJ1ZTtcblxuICAgICAgICAgICAgaWYgKCQoaXRlbSkuaXMoJy50YWJsZWRyYWctcm9vdCcpKSB7XG4gICAgICAgICAgICAgIC8vIFN3YXAgd2l0aCB0aGUgcHJldmlvdXMgdG9wLWxldmVsIHJvdy5cbiAgICAgICAgICAgICAgZ3JvdXBIZWlnaHQgPSAwO1xuICAgICAgICAgICAgICB3aGlsZSAocHJldmlvdXNSb3cgJiYgJHByZXZpb3VzUm93LmZpbmQoJy5qcy1pbmRlbnRhdGlvbicpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICRwcmV2aW91c1JvdyA9ICQocHJldmlvdXNSb3cpLnByZXYoJ3RyOmZpcnN0LW9mLXR5cGUnKTtcbiAgICAgICAgICAgICAgICBwcmV2aW91c1JvdyA9ICRwcmV2aW91c1Jvdy5nZXQoMCk7XG4gICAgICAgICAgICAgICAgZ3JvdXBIZWlnaHQgKz0gJHByZXZpb3VzUm93LmlzKCc6aGlkZGVuJykgPyAwIDogcHJldmlvdXNSb3cub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChwcmV2aW91c1Jvdykge1xuICAgICAgICAgICAgICAgIHNlbGYucm93T2JqZWN0LnN3YXAoJ2JlZm9yZScsIHByZXZpb3VzUm93KTtcbiAgICAgICAgICAgICAgICAvLyBObyBuZWVkIHRvIGNoZWNrIGZvciBpbmRlbnRhdGlvbiwgMCBpcyB0aGUgb25seSB2YWxpZCBvbmUuXG4gICAgICAgICAgICAgICAgd2luZG93LnNjcm9sbEJ5KDAsIC1ncm91cEhlaWdodCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHNlbGYudGFibGUudEJvZGllc1swXS5yb3dzWzBdICE9PSBwcmV2aW91c1JvdyB8fCAkcHJldmlvdXNSb3cuaXMoJy5kcmFnZ2FibGUnKSkge1xuICAgICAgICAgICAgICAvLyBTd2FwIHdpdGggdGhlIHByZXZpb3VzIHJvdyAodW5sZXNzIHByZXZpb3VzIHJvdyBpcyB0aGUgZmlyc3RcbiAgICAgICAgICAgICAgLy8gb25lIGFuZCB1bmRyYWdnYWJsZSkuXG4gICAgICAgICAgICAgIHNlbGYucm93T2JqZWN0LnN3YXAoJ2JlZm9yZScsIHByZXZpb3VzUm93KTtcbiAgICAgICAgICAgICAgc2VsZi5yb3dPYmplY3QuaW50ZXJ2YWwgPSBudWxsO1xuICAgICAgICAgICAgICBzZWxmLnJvd09iamVjdC5pbmRlbnQoMCk7XG4gICAgICAgICAgICAgIHdpbmRvdy5zY3JvbGxCeSgwLCAtcGFyc2VJbnQoaXRlbS5vZmZzZXRIZWlnaHQsIDEwKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBSZWdhaW4gZm9jdXMgYWZ0ZXIgdGhlIERPTSBtYW5pcHVsYXRpb24uXG4gICAgICAgICAgICBoYW5kbGUudHJpZ2dlcignZm9jdXMnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmlnaHQgYXJyb3cuXG4gICAgICAgIGNhc2UgMzk6XG4gICAgICAgIC8vIFNhZmFyaSByaWdodCBhcnJvdy5cbiAgICAgICAgY2FzZSA2MzIzNTpcbiAgICAgICAgICBrZXlDaGFuZ2UgPSB0cnVlO1xuICAgICAgICAgIHNlbGYucm93T2JqZWN0LmluZGVudChzZWxmLnJ0bCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgLy8gRG93biBhcnJvdy5cbiAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgLy8gU2FmYXJpIGRvd24gYXJyb3cuXG4gICAgICAgIGNhc2UgNjMyMzM6IHtcbiAgICAgICAgICBsZXQgJG5leHRSb3cgPSAkKHNlbGYucm93T2JqZWN0Lmdyb3VwKS5lcSgtMSkubmV4dCgndHI6Zmlyc3Qtb2YtdHlwZScpO1xuICAgICAgICAgIGxldCBuZXh0Um93ID0gJG5leHRSb3cuZ2V0KDApO1xuICAgICAgICAgIHdoaWxlIChuZXh0Um93ICYmICRuZXh0Um93LmlzKCc6aGlkZGVuJykpIHtcbiAgICAgICAgICAgICRuZXh0Um93ID0gJChuZXh0Um93KS5uZXh0KCd0cjpmaXJzdC1vZi10eXBlJyk7XG4gICAgICAgICAgICBuZXh0Um93ID0gJG5leHRSb3cuZ2V0KDApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobmV4dFJvdykge1xuICAgICAgICAgICAgLy8gRG8gbm90IGFsbG93IHRoZSBvbkJsdXIgY2xlYW51cC5cbiAgICAgICAgICAgIHNlbGYuc2FmZUJsdXIgPSBmYWxzZTtcbiAgICAgICAgICAgIHNlbGYucm93T2JqZWN0LmRpcmVjdGlvbiA9ICdkb3duJztcbiAgICAgICAgICAgIGtleUNoYW5nZSA9IHRydWU7XG5cbiAgICAgICAgICAgIGlmICgkKGl0ZW0pLmlzKCcudGFibGVkcmFnLXJvb3QnKSkge1xuICAgICAgICAgICAgICAvLyBTd2FwIHdpdGggdGhlIG5leHQgZ3JvdXAgKG5lY2Vzc2FyaWx5IGEgdG9wLWxldmVsIG9uZSkuXG4gICAgICAgICAgICAgIGdyb3VwSGVpZ2h0ID0gMDtcbiAgICAgICAgICAgICAgY29uc3QgbmV4dEdyb3VwID0gbmV3IHNlbGYucm93KG5leHRSb3csICdrZXlib2FyZCcsIHNlbGYuaW5kZW50RW5hYmxlZCwgc2VsZi5tYXhEZXB0aCwgZmFsc2UpO1xuICAgICAgICAgICAgICBpZiAobmV4dEdyb3VwKSB7XG4gICAgICAgICAgICAgICAgJChuZXh0R3JvdXAuZ3JvdXApLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgZ3JvdXBIZWlnaHQgKz0gJCh0aGlzKS5pcygnOmhpZGRlbicpID8gMCA6IHRoaXMub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRHcm91cFJvdyA9ICQobmV4dEdyb3VwLmdyb3VwKS5lcSgtMSkuZ2V0KDApO1xuICAgICAgICAgICAgICAgIHNlbGYucm93T2JqZWN0LnN3YXAoJ2FmdGVyJywgbmV4dEdyb3VwUm93KTtcbiAgICAgICAgICAgICAgICAvLyBObyBuZWVkIHRvIGNoZWNrIGZvciBpbmRlbnRhdGlvbiwgMCBpcyB0aGUgb25seSB2YWxpZCBvbmUuXG4gICAgICAgICAgICAgICAgd2luZG93LnNjcm9sbEJ5KDAsIHBhcnNlSW50KGdyb3VwSGVpZ2h0LCAxMCkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gU3dhcCB3aXRoIHRoZSBuZXh0IHJvdy5cbiAgICAgICAgICAgICAgc2VsZi5yb3dPYmplY3Quc3dhcCgnYWZ0ZXInLCBuZXh0Um93KTtcbiAgICAgICAgICAgICAgc2VsZi5yb3dPYmplY3QuaW50ZXJ2YWwgPSBudWxsO1xuICAgICAgICAgICAgICBzZWxmLnJvd09iamVjdC5pbmRlbnQoMCk7XG4gICAgICAgICAgICAgIHdpbmRvdy5zY3JvbGxCeSgwLCBwYXJzZUludChpdGVtLm9mZnNldEhlaWdodCwgMTApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFJlZ2FpbiBmb2N1cyBhZnRlciB0aGUgRE9NIG1hbmlwdWxhdGlvbi5cbiAgICAgICAgICAgIGhhbmRsZS50cmlnZ2VyKCdmb2N1cycpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWZhbGx0aHJvdWdoICovXG5cbiAgICAgIGlmIChzZWxmLnJvd09iamVjdCAmJiBzZWxmLnJvd09iamVjdC5jaGFuZ2VkID09PSB0cnVlKSB7XG4gICAgICAgICQoaXRlbSkuYWRkQ2xhc3MoJ2RyYWcnKTtcbiAgICAgICAgaWYgKHNlbGYub2xkUm93RWxlbWVudCkge1xuICAgICAgICAgICQoc2VsZi5vbGRSb3dFbGVtZW50KS5yZW1vdmVDbGFzcygnZHJhZy1wcmV2aW91cycpO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYub2xkUm93RWxlbWVudCA9IGl0ZW07XG4gICAgICAgIGlmIChzZWxmLnN0cmlwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgc2VsZi5yZXN0cmlwZVRhYmxlKCk7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5vbkRyYWcoKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmV0dXJuaW5nIGZhbHNlIGlmIHdlIGhhdmUgYW4gYXJyb3cga2V5IHRvIHByZXZlbnQgc2Nyb2xsaW5nLlxuICAgICAgaWYgKGtleUNoYW5nZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBDb21wYXRpYmlsaXR5IGFkZGl0aW9uLCByZXR1cm4gZmFsc2Ugb24ga2V5cHJlc3MgdG8gcHJldmVudCB1bndhbnRlZFxuICAgIC8vIHNjcm9sbGluZy4gSUUgYW5kIFNhZmFyaSB3aWxsIHN1cHByZXNzIHNjcm9sbGluZyBvbiBrZXlkb3duLCBidXQgYWxsXG4gICAgLy8gb3RoZXIgYnJvd3NlcnMgbmVlZCB0byByZXR1cm4gZmFsc2Ugb24ga2V5cHJlc3MuXG4gICAgLy8gaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9qcy9rZXlzLmh0bWxcbiAgICBoYW5kbGUub24oJ2tleXByZXNzJywgKGV2ZW50KSA9PiB7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1mYWxsdGhyb3VnaCAqL1xuXG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgLy8gTGVmdCBhcnJvdy5cbiAgICAgICAgY2FzZSAzNzpcbiAgICAgICAgLy8gVXAgYXJyb3cuXG4gICAgICAgIGNhc2UgMzg6XG4gICAgICAgIC8vIFJpZ2h0IGFycm93LlxuICAgICAgICBjYXNlIDM5OlxuICAgICAgICAvLyBEb3duIGFycm93LlxuICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1mYWxsdGhyb3VnaCAqL1xuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBQb2ludGVyIGV2ZW50IGluaXRpYXRvciwgY3JlYXRlcyBkcmFnIG9iamVjdCBhbmQgaW5mb3JtYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7alF1ZXJ5LkV2ZW50fSBldmVudFxuICAgKiAgIFRoZSBldmVudCBvYmplY3QgdGhhdCB0cmlnZ2VyIHRoZSBkcmFnLlxuICAgKiBAcGFyYW0ge0RydXBhbC50YWJsZURyYWd9IHNlbGZcbiAgICogICBUaGUgZHJhZyBoYW5kbGUuXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGl0ZW1cbiAgICogICBUaGUgaXRlbSB0aGF0IHRoYXQgaXMgYmVpbmcgZHJhZ2dlZC5cbiAgICovXG4gIERydXBhbC50YWJsZURyYWcucHJvdG90eXBlLmRyYWdTdGFydCA9IGZ1bmN0aW9uIChldmVudCwgc2VsZiwgaXRlbSkge1xuICAgIC8vIENyZWF0ZSBhIG5ldyBkcmFnT2JqZWN0IHJlY29yZGluZyB0aGUgcG9pbnRlciBpbmZvcm1hdGlvbi5cbiAgICBzZWxmLmRyYWdPYmplY3QgPSB7fTtcbiAgICBzZWxmLmRyYWdPYmplY3QuaW5pdE9mZnNldCA9IHNlbGYuZ2V0UG9pbnRlck9mZnNldChpdGVtLCBldmVudCk7XG4gICAgc2VsZi5kcmFnT2JqZWN0LmluaXRQb2ludGVyQ29vcmRzID0gc2VsZi5wb2ludGVyQ29vcmRzKGV2ZW50KTtcbiAgICBpZiAoc2VsZi5pbmRlbnRFbmFibGVkKSB7XG4gICAgICBzZWxmLmRyYWdPYmplY3QuaW5kZW50UG9pbnRlclBvcyA9IHNlbGYuZHJhZ09iamVjdC5pbml0UG9pbnRlckNvb3JkcztcbiAgICB9XG5cbiAgICAvLyBJZiB0aGVyZSdzIGEgbGluZ2VyaW5nIHJvdyBvYmplY3QgZnJvbSB0aGUga2V5Ym9hcmQsIHJlbW92ZSBpdHMgZm9jdXMuXG4gICAgaWYgKHNlbGYucm93T2JqZWN0KSB7XG4gICAgICAkKHNlbGYucm93T2JqZWN0LmVsZW1lbnQpLmZpbmQoJ2EudGFibGVkcmFnLWhhbmRsZScpLnRyaWdnZXIoJ2JsdXInKTtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgYSBuZXcgcm93T2JqZWN0IGZvciBtYW5pcHVsYXRpb24gb2YgdGhpcyByb3cuXG4gICAgc2VsZi5yb3dPYmplY3QgPSBuZXcgc2VsZi5yb3coaXRlbSwgJ3BvaW50ZXInLCBzZWxmLmluZGVudEVuYWJsZWQsIHNlbGYubWF4RGVwdGgsIHRydWUpO1xuXG4gICAgLy8gU2F2ZSB0aGUgcG9zaXRpb24gb2YgdGhlIHRhYmxlLlxuICAgIHNlbGYudGFibGUudG9wWSA9ICQoc2VsZi50YWJsZSkub2Zmc2V0KCkudG9wO1xuICAgIHNlbGYudGFibGUuYm90dG9tWSA9IHNlbGYudGFibGUudG9wWSArIHNlbGYudGFibGUub2Zmc2V0SGVpZ2h0O1xuXG4gICAgLy8gQWRkIGNsYXNzZXMgdG8gdGhlIGhhbmRsZSBhbmQgcm93LlxuICAgICQoaXRlbSkuYWRkQ2xhc3MoJ2RyYWcnKTtcblxuICAgIC8vIFNldCB0aGUgZG9jdW1lbnQgdG8gdXNlIHRoZSBtb3ZlIGN1cnNvciBkdXJpbmcgZHJhZy5cbiAgICAkKCdib2R5JykuYWRkQ2xhc3MoJ2RyYWcnKTtcbiAgICBpZiAoc2VsZi5vbGRSb3dFbGVtZW50KSB7XG4gICAgICAkKHNlbGYub2xkUm93RWxlbWVudCkucmVtb3ZlQ2xhc3MoJ2RyYWctcHJldmlvdXMnKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFBvaW50ZXIgbW92ZW1lbnQgaGFuZGxlciwgYm91bmQgdG8gZG9jdW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7alF1ZXJ5LkV2ZW50fSBldmVudFxuICAgKiAgIFRoZSBwb2ludGVyIGV2ZW50LlxuICAgKiBAcGFyYW0ge0RydXBhbC50YWJsZURyYWd9IHNlbGZcbiAgICogICBUaGUgdGFibGVEcmFnIGluc3RhbmNlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sfHVuZGVmaW5lZH1cbiAgICogICBVbmRlZmluZWQgaWYgbm8gZHJhZ09iamVjdCBpcyBkZWZpbmVkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBEcnVwYWwudGFibGVEcmFnLnByb3RvdHlwZS5kcmFnUm93ID0gZnVuY3Rpb24gKGV2ZW50LCBzZWxmKSB7XG4gICAgaWYgKHNlbGYuZHJhZ09iamVjdCkge1xuICAgICAgc2VsZi5jdXJyZW50UG9pbnRlckNvb3JkcyA9IHNlbGYucG9pbnRlckNvb3JkcyhldmVudCk7XG4gICAgICBjb25zdCB5ID0gc2VsZi5jdXJyZW50UG9pbnRlckNvb3Jkcy55IC0gc2VsZi5kcmFnT2JqZWN0LmluaXRPZmZzZXQueTtcbiAgICAgIGNvbnN0IHggPSBzZWxmLmN1cnJlbnRQb2ludGVyQ29vcmRzLnggLSBzZWxmLmRyYWdPYmplY3QuaW5pdE9mZnNldC54O1xuXG4gICAgICAvLyBDaGVjayBmb3Igcm93IHN3YXBwaW5nIGFuZCB2ZXJ0aWNhbCBzY3JvbGxpbmcuXG4gICAgICBpZiAoeSAhPT0gc2VsZi5vbGRZKSB7XG4gICAgICAgIHNlbGYucm93T2JqZWN0LmRpcmVjdGlvbiA9IHkgPiBzZWxmLm9sZFkgPyAnZG93bicgOiAndXAnO1xuICAgICAgICAvLyBVcGRhdGUgdGhlIG9sZCB2YWx1ZS5cbiAgICAgICAgc2VsZi5vbGRZID0geTtcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHdpbmRvdyBzaG91bGQgYmUgc2Nyb2xsZWQgKGFuZCBob3cgZmFzdCkuXG4gICAgICAgIGNvbnN0IHNjcm9sbEFtb3VudCA9IHNlbGYuY2hlY2tTY3JvbGwoc2VsZi5jdXJyZW50UG9pbnRlckNvb3Jkcy55KTtcbiAgICAgICAgLy8gU3RvcCBhbnkgY3VycmVudCBzY3JvbGxpbmcuXG4gICAgICAgIGNsZWFySW50ZXJ2YWwoc2VsZi5zY3JvbGxJbnRlcnZhbCk7XG4gICAgICAgIC8vIENvbnRpbnVlIHNjcm9sbGluZyBpZiB0aGUgbW91c2UgaGFzIG1vdmVkIGluIHRoZSBzY3JvbGwgZGlyZWN0aW9uLlxuICAgICAgICBpZiAoKHNjcm9sbEFtb3VudCA+IDAgJiYgc2VsZi5yb3dPYmplY3QuZGlyZWN0aW9uID09PSAnZG93bicpXG4gICAgICAgICAgfHwgKHNjcm9sbEFtb3VudCA8IDAgJiYgc2VsZi5yb3dPYmplY3QuZGlyZWN0aW9uID09PSAndXAnKSkge1xuICAgICAgICAgIHNlbGYuc2V0U2Nyb2xsKHNjcm9sbEFtb3VudCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgdmFsaWQgdGFyZ2V0LCBwZXJmb3JtIHRoZSBzd2FwIGFuZCByZXN0cmlwZSB0aGUgdGFibGUuXG4gICAgICAgIGNvbnN0IGN1cnJlbnRSb3cgPSBzZWxmLmZpbmREcm9wVGFyZ2V0Um93KHgsIHkpO1xuICAgICAgICBpZiAoY3VycmVudFJvdykge1xuICAgICAgICAgIGlmIChzZWxmLnJvd09iamVjdC5kaXJlY3Rpb24gPT09ICdkb3duJykge1xuICAgICAgICAgICAgc2VsZi5yb3dPYmplY3Quc3dhcCgnYWZ0ZXInLCBjdXJyZW50Um93LCBzZWxmKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZWxmLnJvd09iamVjdC5zd2FwKCdiZWZvcmUnLCBjdXJyZW50Um93LCBzZWxmKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNlbGYuc3RyaXBpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHNlbGYucmVzdHJpcGVUYWJsZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBTaW1pbGFyIHRvIHJvdyBzd2FwcGluZywgaGFuZGxlIGluZGVudGF0aW9ucy5cbiAgICAgIGlmIChzZWxmLmluZGVudEVuYWJsZWQpIHtcbiAgICAgICAgY29uc3QgeERpZmYgPSBzZWxmLmN1cnJlbnRQb2ludGVyQ29vcmRzLnggLSBzZWxmLmRyYWdPYmplY3QuaW5kZW50UG9pbnRlclBvcy54O1xuICAgICAgICAvLyBTZXQgdGhlIG51bWJlciBvZiBpbmRlbnRhdGlvbnMgdGhlIHBvaW50ZXIgaGFzIGJlZW4gbW92ZWQgbGVmdCBvclxuICAgICAgICAvLyByaWdodC5cbiAgICAgICAgY29uc3QgaW5kZW50RGlmZiA9IE1hdGgucm91bmQoeERpZmYgLyBzZWxmLmluZGVudEFtb3VudCk7XG4gICAgICAgIC8vIEluZGVudCB0aGUgcm93IHdpdGggb3VyIGVzdGltYXRlZCBkaWZmLCB3aGljaCBtYXkgYmUgZnVydGhlclxuICAgICAgICAvLyByZXN0cmljdGVkIGFjY29yZGluZyB0byB0aGUgcm93cyBhcm91bmQgdGhpcyByb3cuXG4gICAgICAgIGNvbnN0IGluZGVudENoYW5nZSA9IHNlbGYucm93T2JqZWN0LmluZGVudChpbmRlbnREaWZmKTtcbiAgICAgICAgLy8gVXBkYXRlIHRhYmxlIGFuZCBwb2ludGVyIGluZGVudGF0aW9ucy5cbiAgICAgICAgc2VsZi5kcmFnT2JqZWN0LmluZGVudFBvaW50ZXJQb3MueCArPSBzZWxmLmluZGVudEFtb3VudCAqIGluZGVudENoYW5nZSAqIHNlbGYucnRsO1xuICAgICAgICBzZWxmLmluZGVudENvdW50ID0gTWF0aC5tYXgoc2VsZi5pbmRlbnRDb3VudCwgc2VsZi5yb3dPYmplY3QuaW5kZW50cyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFBvaW50ZXJ1cCBiZWhhdmlvci5cbiAgICpcbiAgICogQHBhcmFtIHtqUXVlcnkuRXZlbnR9IGV2ZW50XG4gICAqICAgVGhlIHBvaW50ZXIgZXZlbnQuXG4gICAqIEBwYXJhbSB7RHJ1cGFsLnRhYmxlRHJhZ30gc2VsZlxuICAgKiAgIFRoZSB0YWJsZURyYWcgaW5zdGFuY2UuXG4gICAqL1xuICBEcnVwYWwudGFibGVEcmFnLnByb3RvdHlwZS5kcm9wUm93ID0gZnVuY3Rpb24gKGV2ZW50LCBzZWxmKSB7XG4gICAgbGV0IGRyb3BwZWRSb3c7XG4gICAgbGV0ICRkcm9wcGVkUm93O1xuXG4gICAgLy8gRHJvcCByb3cgZnVuY3Rpb25hbGl0eS5cbiAgICBpZiAoc2VsZi5yb3dPYmplY3QgIT09IG51bGwpIHtcbiAgICAgIGRyb3BwZWRSb3cgPSBzZWxmLnJvd09iamVjdC5lbGVtZW50O1xuICAgICAgJGRyb3BwZWRSb3cgPSAkKGRyb3BwZWRSb3cpO1xuICAgICAgLy8gVGhlIHJvdyBpcyBhbHJlYWR5IGluIHRoZSByaWdodCBwbGFjZSBzbyB3ZSBqdXN0IHJlbGVhc2UgaXQuXG4gICAgICBpZiAoc2VsZi5yb3dPYmplY3QuY2hhbmdlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAvLyBVcGRhdGUgdGhlIGZpZWxkcyBpbiB0aGUgZHJvcHBlZCByb3cuXG4gICAgICAgIHNlbGYudXBkYXRlRmllbGRzKGRyb3BwZWRSb3cpO1xuXG4gICAgICAgIC8vIElmIGEgc2V0dGluZyBleGlzdHMgZm9yIGFmZmVjdGluZyB0aGUgZW50aXJlIGdyb3VwLCB1cGRhdGUgYWxsIHRoZVxuICAgICAgICAvLyBmaWVsZHMgaW4gdGhlIGVudGlyZSBkcmFnZ2VkIGdyb3VwLlxuICAgICAgICBPYmplY3Qua2V5cyhzZWxmLnRhYmxlU2V0dGluZ3MgfHwge30pLmZvckVhY2goKGdyb3VwKSA9PiB7XG4gICAgICAgICAgY29uc3Qgcm93U2V0dGluZ3MgPSBzZWxmLnJvd1NldHRpbmdzKGdyb3VwLCBkcm9wcGVkUm93KTtcbiAgICAgICAgICBpZiAocm93U2V0dGluZ3MucmVsYXRpb25zaGlwID09PSAnZ3JvdXAnKSB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzZWxmLnJvd09iamVjdC5jaGlsZHJlbiB8fCB7fSkuZm9yRWFjaCgobikgPT4ge1xuICAgICAgICAgICAgICBzZWxmLnVwZGF0ZUZpZWxkKHNlbGYucm93T2JqZWN0LmNoaWxkcmVuW25dLCBncm91cCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNlbGYucm93T2JqZWN0Lm1hcmtDaGFuZ2VkKCk7XG4gICAgICAgIGlmIChzZWxmLmNoYW5nZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgJChEcnVwYWwudGhlbWUoJ3RhYmxlRHJhZ0NoYW5nZWRXYXJuaW5nJykpLmluc2VydEJlZm9yZShzZWxmLnRhYmxlKS5oaWRlKCkuZmFkZUluKCdzbG93Jyk7XG4gICAgICAgICAgc2VsZi5jaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc2VsZi5pbmRlbnRFbmFibGVkKSB7XG4gICAgICAgIHNlbGYucm93T2JqZWN0LnJlbW92ZUluZGVudENsYXNzZXMoKTtcbiAgICAgIH1cbiAgICAgIGlmIChzZWxmLm9sZFJvd0VsZW1lbnQpIHtcbiAgICAgICAgJChzZWxmLm9sZFJvd0VsZW1lbnQpLnJlbW92ZUNsYXNzKCdkcmFnLXByZXZpb3VzJyk7XG4gICAgICB9XG4gICAgICAkZHJvcHBlZFJvdy5yZW1vdmVDbGFzcygnZHJhZycpLmFkZENsYXNzKCdkcmFnLXByZXZpb3VzJyk7XG4gICAgICBzZWxmLm9sZFJvd0VsZW1lbnQgPSBkcm9wcGVkUm93O1xuICAgICAgc2VsZi5vbkRyb3AoKTtcbiAgICAgIHNlbGYucm93T2JqZWN0ID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBGdW5jdGlvbmFsaXR5IHNwZWNpZmljIG9ubHkgdG8gcG9pbnRlcnVwIGV2ZW50cy5cbiAgICBpZiAoc2VsZi5kcmFnT2JqZWN0ICE9PSBudWxsKSB7XG4gICAgICBzZWxmLmRyYWdPYmplY3QgPSBudWxsO1xuICAgICAgJCgnYm9keScpLnJlbW92ZUNsYXNzKCdkcmFnJyk7XG4gICAgICBjbGVhckludGVydmFsKHNlbGYuc2Nyb2xsSW50ZXJ2YWwpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogR2V0IHRoZSBjb29yZGluYXRlcyBmcm9tIHRoZSBldmVudCAoYWxsb3dpbmcgZm9yIGJyb3dzZXIgZGlmZmVyZW5jZXMpLlxuICAgKlxuICAgKiBAcGFyYW0ge2pRdWVyeS5FdmVudH0gZXZlbnRcbiAgICogICBUaGUgcG9pbnRlciBldmVudC5cbiAgICpcbiAgICogQHJldHVybiB7b2JqZWN0fVxuICAgKiAgIEFuIG9iamVjdCB3aXRoIGB4YCBhbmQgYHlgIGtleXMgaW5kaWNhdGluZyB0aGUgcG9zaXRpb24uXG4gICAqL1xuICBEcnVwYWwudGFibGVEcmFnLnByb3RvdHlwZS5wb2ludGVyQ29vcmRzID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LnBhZ2VYIHx8IGV2ZW50LnBhZ2VZKSB7XG4gICAgICByZXR1cm4geyB4OiBldmVudC5wYWdlWCwgeTogZXZlbnQucGFnZVkgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IChldmVudC5jbGllbnRYICsgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0KSAtIGRvY3VtZW50LmJvZHkuY2xpZW50TGVmdCxcbiAgICAgIHk6IChldmVudC5jbGllbnRZICsgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3ApIC0gZG9jdW1lbnQuYm9keS5jbGllbnRUb3AsXG4gICAgfTtcbiAgfTtcblxuICAvKipcbiAgICogR2V0IHRoZSBldmVudCBvZmZzZXQgZnJvbSB0aGUgdGFyZ2V0IGVsZW1lbnQuXG4gICAqXG4gICAqIEdpdmVuIGEgdGFyZ2V0IGVsZW1lbnQgYW5kIGEgcG9pbnRlciBldmVudCwgZ2V0IHRoZSBldmVudCBvZmZzZXQgZnJvbSB0aGF0XG4gICAqIGVsZW1lbnQuIFRvIGRvIHRoaXMgd2UgbmVlZCB0aGUgZWxlbWVudCdzIHBvc2l0aW9uIGFuZCB0aGUgdGFyZ2V0IHBvc2l0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YXJnZXRcbiAgICogICBUaGUgdGFyZ2V0IEhUTUwgZWxlbWVudC5cbiAgICogQHBhcmFtIHtqUXVlcnkuRXZlbnR9IGV2ZW50XG4gICAqICAgVGhlIHBvaW50ZXIgZXZlbnQuXG4gICAqXG4gICAqIEByZXR1cm4ge29iamVjdH1cbiAgICogICBBbiBvYmplY3Qgd2l0aCBgeGAgYW5kIGB5YCBrZXlzIGluZGljYXRpbmcgdGhlIHBvc2l0aW9uLlxuICAgKi9cbiAgRHJ1cGFsLnRhYmxlRHJhZy5wcm90b3R5cGUuZ2V0UG9pbnRlck9mZnNldCA9IGZ1bmN0aW9uICh0YXJnZXQsIGV2ZW50KSB7XG4gICAgY29uc3QgZG9jUG9zID0gJCh0YXJnZXQpLm9mZnNldCgpO1xuICAgIGNvbnN0IHBvaW50ZXJQb3MgPSB0aGlzLnBvaW50ZXJDb29yZHMoZXZlbnQpO1xuICAgIHJldHVybiB7IHg6IHBvaW50ZXJQb3MueCAtIGRvY1Bvcy5sZWZ0LCB5OiBwb2ludGVyUG9zLnkgLSBkb2NQb3MudG9wIH07XG4gIH07XG5cbiAgLyoqXG4gICAqIEZpbmQgdGhlIHJvdyB0aGUgbW91c2UgaXMgY3VycmVudGx5IG92ZXIuXG4gICAqXG4gICAqIFRoaXMgcm93IGlzIHRoZW4gdGFrZW4gYW5kIHN3YXBwZWQgd2l0aCB0aGUgb25lIGJlaW5nIGRyYWdnZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqICAgVGhlIHggY29vcmRpbmF0ZSBvZiB0aGUgbW91c2Ugb24gdGhlIHBhZ2UgKG5vdCB0aGUgc2NyZWVuKS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICogICBUaGUgeSBjb29yZGluYXRlIG9mIHRoZSBtb3VzZSBvbiB0aGUgcGFnZSAobm90IHRoZSBzY3JlZW4pLlxuICAgKlxuICAgKiBAcmV0dXJuIHsqfVxuICAgKiAgIFRoZSBkcm9wIHRhcmdldCByb3csIGlmIGZvdW5kLlxuICAgKi9cbiAgRHJ1cGFsLnRhYmxlRHJhZy5wcm90b3R5cGUuZmluZERyb3BUYXJnZXRSb3cgPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgIGNvbnN0IHJvd3MgPSAkKHRoaXMudGFibGUudEJvZGllc1swXS5yb3dzKS5ub3QoJzpoaWRkZW4nKTtcbiAgICBmb3IgKGxldCBuID0gMDsgbiA8IHJvd3MubGVuZ3RoOyBuKyspIHtcbiAgICAgIGxldCByb3cgPSByb3dzW25dO1xuICAgICAgbGV0ICRyb3cgPSAkKHJvdyk7XG4gICAgICBjb25zdCByb3dZID0gJHJvdy5vZmZzZXQoKS50b3A7XG4gICAgICBsZXQgcm93SGVpZ2h0O1xuICAgICAgLy8gQmVjYXVzZSBTYWZhcmkgZG9lcyBub3QgcmVwb3J0IG9mZnNldEhlaWdodCBvbiB0YWJsZSByb3dzLCBidXQgZG9lcyBvblxuICAgICAgLy8gdGFibGUgY2VsbHMsIGdyYWIgdGhlIGZpcnN0Q2hpbGQgb2YgdGhlIHJvdyBhbmQgdXNlIHRoYXQgaW5zdGVhZC5cbiAgICAgIC8vIGh0dHA6Ly9qYWNvYi5wZWFyZ3JvdmUuY29tL2Jsb2cvMjAwNi90ZWNobmljYWwvdGFibGUtcm93LW9mZnNldHRvcC1idWctaW4tc2FmYXJpLlxuICAgICAgaWYgKHJvdy5vZmZzZXRIZWlnaHQgPT09IDApIHtcbiAgICAgICAgcm93SGVpZ2h0ID0gcGFyc2VJbnQocm93LmZpcnN0Q2hpbGQub2Zmc2V0SGVpZ2h0LCAxMCkgLyAyO1xuICAgICAgfVxuICAgICAgLy8gT3RoZXIgYnJvd3NlcnMuXG4gICAgICBlbHNlIHtcbiAgICAgICAgcm93SGVpZ2h0ID0gcGFyc2VJbnQocm93Lm9mZnNldEhlaWdodCwgMTApIC8gMjtcbiAgICAgIH1cblxuICAgICAgLy8gQmVjYXVzZSB3ZSBhbHdheXMgaW5zZXJ0IGJlZm9yZSwgd2UgbmVlZCB0byBvZmZzZXQgdGhlIGhlaWdodCBhIGJpdC5cbiAgICAgIGlmICgoeSA+IChyb3dZIC0gcm93SGVpZ2h0KSkgJiYgKHkgPCAocm93WSArIHJvd0hlaWdodCkpKSB7XG4gICAgICAgIGlmICh0aGlzLmluZGVudEVuYWJsZWQpIHtcbiAgICAgICAgICAvLyBDaGVjayB0aGF0IHRoaXMgcm93IGlzIG5vdCBhIGNoaWxkIG9mIHRoZSByb3cgYmVpbmcgZHJhZ2dlZC5cbiAgICAgICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5yb3dPYmplY3QuZ3JvdXApXG4gICAgICAgICAgICAuZXZlcnkobyA9PiAodGhpcy5yb3dPYmplY3QuZ3JvdXBbb10gPT09IHJvdykpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gRG8gbm90IGFsbG93IGEgcm93IHRvIGJlIHN3YXBwZWQgd2l0aCBpdHNlbGYuXG4gICAgICAgIGVsc2UgaWYgKHJvdyA9PT0gdGhpcy5yb3dPYmplY3QuZWxlbWVudCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgdGhhdCBzd2FwcGluZyB3aXRoIHRoaXMgcm93IGlzIGFsbG93ZWQuXG4gICAgICAgIGlmICghdGhpcy5yb3dPYmplY3QuaXNWYWxpZFN3YXAocm93KSkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gV2UgbWF5IGhhdmUgZm91bmQgdGhlIHJvdyB0aGUgbW91c2UganVzdCBwYXNzZWQgb3ZlciwgYnV0IGl0IGRvZXNuJ3RcbiAgICAgICAgLy8gdGFrZSBpbnRvIGFjY291bnQgaGlkZGVuIHJvd3MuIFNraXAgYmFja3dhcmRzIHVudGlsIHdlIGZpbmQgYVxuICAgICAgICAvLyBkcmFnZ2FibGUgcm93LlxuICAgICAgICB3aGlsZSAoJHJvdy5pcygnOmhpZGRlbicpICYmICRyb3cucHJldigndHInKS5pcygnOmhpZGRlbicpKSB7XG4gICAgICAgICAgJHJvdyA9ICRyb3cucHJldigndHI6Zmlyc3Qtb2YtdHlwZScpO1xuICAgICAgICAgIHJvdyA9ICRyb3cuZ2V0KDApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByb3c7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBZnRlciB0aGUgcm93IGlzIGRyb3BwZWQsIHVwZGF0ZSB0aGUgdGFibGUgZmllbGRzLlxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBjaGFuZ2VkUm93XG4gICAqICAgRE9NIG9iamVjdCBmb3IgdGhlIHJvdyB0aGF0IHdhcyBqdXN0IGRyb3BwZWQuXG4gICAqL1xuICBEcnVwYWwudGFibGVEcmFnLnByb3RvdHlwZS51cGRhdGVGaWVsZHMgPSBmdW5jdGlvbiAoY2hhbmdlZFJvdykge1xuICAgIE9iamVjdC5rZXlzKHRoaXMudGFibGVTZXR0aW5ncyB8fCB7fSkuZm9yRWFjaCgoZ3JvdXApID0+IHtcbiAgICAgIC8vIEVhY2ggZ3JvdXAgbWF5IGhhdmUgYSBkaWZmZXJlbnQgc2V0dGluZyBmb3IgcmVsYXRpb25zaGlwLCBzbyB3ZSBmaW5kXG4gICAgICAvLyB0aGUgc291cmNlIHJvd3MgZm9yIGVhY2ggc2VwYXJhdGVseS5cbiAgICAgIHRoaXMudXBkYXRlRmllbGQoY2hhbmdlZFJvdywgZ3JvdXApO1xuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBZnRlciB0aGUgcm93IGlzIGRyb3BwZWQsIHVwZGF0ZSBhIHNpbmdsZSB0YWJsZSBmaWVsZC5cbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY2hhbmdlZFJvd1xuICAgKiAgIERPTSBvYmplY3QgZm9yIHRoZSByb3cgdGhhdCB3YXMganVzdCBkcm9wcGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZ3JvdXBcbiAgICogICBUaGUgc2V0dGluZ3MgZ3JvdXAgb24gd2hpY2ggZmllbGQgdXBkYXRlcyB3aWxsIG9jY3VyLlxuICAgKi9cbiAgRHJ1cGFsLnRhYmxlRHJhZy5wcm90b3R5cGUudXBkYXRlRmllbGQgPSBmdW5jdGlvbiAoY2hhbmdlZFJvdywgZ3JvdXApIHtcbiAgICBsZXQgcm93U2V0dGluZ3MgPSB0aGlzLnJvd1NldHRpbmdzKGdyb3VwLCBjaGFuZ2VkUm93KTtcbiAgICBjb25zdCAkY2hhbmdlZFJvdyA9ICQoY2hhbmdlZFJvdyk7XG4gICAgbGV0IHNvdXJjZVJvdztcbiAgICBsZXQgJHByZXZpb3VzUm93O1xuICAgIGxldCBwcmV2aW91c1JvdztcbiAgICBsZXQgdXNlU2libGluZztcbiAgICAvLyBTZXQgdGhlIHJvdyBhcyBpdHMgb3duIHRhcmdldC5cbiAgICBpZiAocm93U2V0dGluZ3MucmVsYXRpb25zaGlwID09PSAnc2VsZicgfHwgcm93U2V0dGluZ3MucmVsYXRpb25zaGlwID09PSAnZ3JvdXAnKSB7XG4gICAgICBzb3VyY2VSb3cgPSBjaGFuZ2VkUm93O1xuICAgIH1cbiAgICAvLyBTaWJsaW5ncyBhcmUgZWFzeSwgY2hlY2sgcHJldmlvdXMgYW5kIG5leHQgcm93cy5cbiAgICBlbHNlIGlmIChyb3dTZXR0aW5ncy5yZWxhdGlvbnNoaXAgPT09ICdzaWJsaW5nJykge1xuICAgICAgJHByZXZpb3VzUm93ID0gJGNoYW5nZWRSb3cucHJldigndHI6Zmlyc3Qtb2YtdHlwZScpO1xuICAgICAgcHJldmlvdXNSb3cgPSAkcHJldmlvdXNSb3cuZ2V0KDApO1xuICAgICAgY29uc3QgJG5leHRSb3cgPSAkY2hhbmdlZFJvdy5uZXh0KCd0cjpmaXJzdC1vZi10eXBlJyk7XG4gICAgICBjb25zdCBuZXh0Um93ID0gJG5leHRSb3cuZ2V0KDApO1xuICAgICAgc291cmNlUm93ID0gY2hhbmdlZFJvdztcbiAgICAgIGlmICgkcHJldmlvdXNSb3cuaXMoJy5kcmFnZ2FibGUnKSAmJiAkcHJldmlvdXNSb3cuZmluZChgLiR7Z3JvdXB9YCkubGVuZ3RoKSB7XG4gICAgICAgIGlmICh0aGlzLmluZGVudEVuYWJsZWQpIHtcbiAgICAgICAgICBpZiAoJHByZXZpb3VzUm93LmZpbmQoJy5qcy1pbmRlbnRhdGlvbnMnKS5sZW5ndGggPT09ICRjaGFuZ2VkUm93LmZpbmQoJy5qcy1pbmRlbnRhdGlvbnMnKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHNvdXJjZVJvdyA9IHByZXZpb3VzUm93O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBzb3VyY2VSb3cgPSBwcmV2aW91c1JvdztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoJG5leHRSb3cuaXMoJy5kcmFnZ2FibGUnKSAmJiAkbmV4dFJvdy5maW5kKGAuJHtncm91cH1gKS5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHRoaXMuaW5kZW50RW5hYmxlZCkge1xuICAgICAgICAgIGlmICgkbmV4dFJvdy5maW5kKCcuanMtaW5kZW50YXRpb25zJykubGVuZ3RoID09PSAkY2hhbmdlZFJvdy5maW5kKCcuanMtaW5kZW50YXRpb25zJykubGVuZ3RoKSB7XG4gICAgICAgICAgICBzb3VyY2VSb3cgPSBuZXh0Um93O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBzb3VyY2VSb3cgPSBuZXh0Um93O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFBhcmVudHMsIGxvb2sgdXAgdGhlIHRyZWUgdW50aWwgd2UgZmluZCBhIGZpZWxkIG5vdCBpbiB0aGlzIGdyb3VwLlxuICAgIC8vIEdvIHVwIGFzIG1hbnkgcGFyZW50cyBhcyBpbmRlbnRhdGlvbnMgaW4gdGhlIGNoYW5nZWQgcm93LlxuICAgIGVsc2UgaWYgKHJvd1NldHRpbmdzLnJlbGF0aW9uc2hpcCA9PT0gJ3BhcmVudCcpIHtcbiAgICAgICRwcmV2aW91c1JvdyA9ICRjaGFuZ2VkUm93LnByZXYoJ3RyJyk7XG4gICAgICBwcmV2aW91c1JvdyA9ICRwcmV2aW91c1JvdztcbiAgICAgIHdoaWxlICgkcHJldmlvdXNSb3cubGVuZ3RoICYmICRwcmV2aW91c1Jvdy5maW5kKCcuanMtaW5kZW50YXRpb24nKS5sZW5ndGggPj0gdGhpcy5yb3dPYmplY3QuaW5kZW50cykge1xuICAgICAgICAkcHJldmlvdXNSb3cgPSAkcHJldmlvdXNSb3cucHJldigndHInKTtcbiAgICAgICAgcHJldmlvdXNSb3cgPSAkcHJldmlvdXNSb3c7XG4gICAgICB9XG4gICAgICAvLyBJZiB3ZSBmb3VuZCBhIHJvdy5cbiAgICAgIGlmICgkcHJldmlvdXNSb3cubGVuZ3RoKSB7XG4gICAgICAgIHNvdXJjZVJvdyA9ICRwcmV2aW91c1Jvdy5nZXQoMCk7XG4gICAgICB9XG4gICAgICAvLyBPdGhlcndpc2Ugd2Ugd2VudCBhbGwgdGhlIHdheSB0byB0aGUgbGVmdCBvZiB0aGUgdGFibGUgd2l0aG91dCBmaW5kaW5nXG4gICAgICAvLyBhIHBhcmVudCwgbWVhbmluZyB0aGlzIGl0ZW0gaGFzIGJlZW4gcGxhY2VkIGF0IHRoZSByb290IGxldmVsLlxuICAgICAgZWxzZSB7XG4gICAgICAgIC8vIFVzZSB0aGUgZmlyc3Qgcm93IGluIHRoZSB0YWJsZSBhcyBzb3VyY2UsIGJlY2F1c2UgaXQncyBndWFyYW50ZWVkIHRvXG4gICAgICAgIC8vIGJlIGF0IHRoZSByb290IGxldmVsLiBGaW5kIHRoZSBmaXJzdCBpdGVtLCB0aGVuIGNvbXBhcmUgdGhpcyByb3dcbiAgICAgICAgLy8gYWdhaW5zdCBpdCBhcyBhIHNpYmxpbmcuXG4gICAgICAgIHNvdXJjZVJvdyA9ICQodGhpcy50YWJsZSkuZmluZCgndHIuZHJhZ2dhYmxlOmZpcnN0LW9mLXR5cGUnKS5nZXQoMCk7XG4gICAgICAgIGlmIChzb3VyY2VSb3cgPT09IHRoaXMucm93T2JqZWN0LmVsZW1lbnQpIHtcbiAgICAgICAgICBzb3VyY2VSb3cgPSAkKHRoaXMucm93T2JqZWN0Lmdyb3VwW3RoaXMucm93T2JqZWN0Lmdyb3VwLmxlbmd0aCAtIDFdKS5uZXh0KCd0ci5kcmFnZ2FibGUnKS5nZXQoMCk7XG4gICAgICAgIH1cbiAgICAgICAgdXNlU2libGluZyA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQmVjYXVzZSB3ZSBtYXkgaGF2ZSBtb3ZlZCB0aGUgcm93IGZyb20gb25lIGNhdGVnb3J5IHRvIGFub3RoZXIsXG4gICAgLy8gdGFrZSBhIGxvb2sgYXQgb3VyIHNpYmxpbmcgYW5kIGJvcnJvdyBpdHMgc291cmNlcyBhbmQgdGFyZ2V0cy5cbiAgICB0aGlzLmNvcHlEcmFnQ2xhc3Nlcyhzb3VyY2VSb3csIGNoYW5nZWRSb3csIGdyb3VwKTtcbiAgICByb3dTZXR0aW5ncyA9IHRoaXMucm93U2V0dGluZ3MoZ3JvdXAsIGNoYW5nZWRSb3cpO1xuXG4gICAgLy8gSW4gdGhlIGNhc2UgdGhhdCB3ZSdyZSBsb29raW5nIGZvciBhIHBhcmVudCwgYnV0IHRoZSByb3cgaXMgYXQgdGhlIHRvcFxuICAgIC8vIG9mIHRoZSB0cmVlLCBjb3B5IG91ciBzaWJsaW5nJ3MgdmFsdWVzLlxuICAgIGlmICh1c2VTaWJsaW5nKSB7XG4gICAgICByb3dTZXR0aW5ncy5yZWxhdGlvbnNoaXAgPSAnc2libGluZyc7XG4gICAgICByb3dTZXR0aW5ncy5zb3VyY2UgPSByb3dTZXR0aW5ncy50YXJnZXQ7XG4gICAgfVxuXG4gICAgY29uc3QgdGFyZ2V0Q2xhc3MgPSBgLiR7cm93U2V0dGluZ3MudGFyZ2V0fWA7XG4gICAgY29uc3QgdGFyZ2V0RWxlbWVudCA9ICRjaGFuZ2VkUm93LmZpbmQodGFyZ2V0Q2xhc3MpLmdldCgwKTtcblxuICAgIC8vIENoZWNrIGlmIGEgdGFyZ2V0IGVsZW1lbnQgZXhpc3RzIGluIHRoaXMgcm93LlxuICAgIGlmICh0YXJnZXRFbGVtZW50KSB7XG4gICAgICBjb25zdCBzb3VyY2VDbGFzcyA9IGAuJHtyb3dTZXR0aW5ncy5zb3VyY2V9YDtcbiAgICAgIGNvbnN0IHNvdXJjZUVsZW1lbnQgPSAkKHNvdXJjZUNsYXNzLCBzb3VyY2VSb3cpLmdldCgwKTtcbiAgICAgIHN3aXRjaCAocm93U2V0dGluZ3MuYWN0aW9uKSB7XG4gICAgICAgIGNhc2UgJ2RlcHRoJzpcbiAgICAgICAgICAvLyBHZXQgdGhlIGRlcHRoIG9mIHRoZSB0YXJnZXQgcm93LlxuICAgICAgICAgIHRhcmdldEVsZW1lbnQudmFsdWUgPSAkKHNvdXJjZUVsZW1lbnQpLmNsb3Nlc3QoJ3RyJykuZmluZCgnLmpzLWluZGVudGF0aW9uJykubGVuZ3RoO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ21hdGNoJzpcbiAgICAgICAgICAvLyBVcGRhdGUgdGhlIHZhbHVlLlxuICAgICAgICAgIHRhcmdldEVsZW1lbnQudmFsdWUgPSBzb3VyY2VFbGVtZW50LnZhbHVlO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ29yZGVyJzoge1xuICAgICAgICAgIGNvbnN0IHNpYmxpbmdzID0gdGhpcy5yb3dPYmplY3QuZmluZFNpYmxpbmdzKHJvd1NldHRpbmdzKTtcbiAgICAgICAgICBpZiAoJCh0YXJnZXRFbGVtZW50KS5pcygnc2VsZWN0JykpIHtcbiAgICAgICAgICAgIC8vIEdldCBhIGxpc3Qgb2YgYWNjZXB0YWJsZSB2YWx1ZXMuXG4gICAgICAgICAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICAgICAgICAgICQodGFyZ2V0RWxlbWVudCkuZmluZCgnb3B0aW9uJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHZhbHVlcy5wdXNoKHRoaXMudmFsdWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBtYXhWYWwgPSB2YWx1ZXNbdmFsdWVzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgLy8gUG9wdWxhdGUgdGhlIHZhbHVlcyBpbiB0aGUgc2libGluZ3MuXG4gICAgICAgICAgICAkKHNpYmxpbmdzKS5maW5kKHRhcmdldENsYXNzKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG1vcmUgaXRlbXMgdGhhbiBwb3NzaWJsZSB2YWx1ZXMsIGFzc2lnbiB0aGVcbiAgICAgICAgICAgICAgLy8gbWF4aW11bSB2YWx1ZSB0byB0aGUgcm93LlxuICAgICAgICAgICAgICBpZiAodmFsdWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWVzLnNoaWZ0KCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IG1heFZhbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gQXNzdW1lIGEgbnVtZXJpYyBpbnB1dCBmaWVsZC5cbiAgICAgICAgICAgIGxldCB3ZWlnaHQgPSBwYXJzZUludCgkKHNpYmxpbmdzWzBdKS5maW5kKHRhcmdldENsYXNzKS52YWwoKSwgMTApIHx8IDA7XG4gICAgICAgICAgICAkKHNpYmxpbmdzKS5maW5kKHRhcmdldENsYXNzKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHdlaWdodDtcbiAgICAgICAgICAgICAgd2VpZ2h0Kys7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIENvcHkgYWxsIHRhYmxlRHJhZyByZWxhdGVkIGNsYXNzZXMgZnJvbSBvbmUgcm93IHRvIGFub3RoZXIuXG4gICAqXG4gICAqIENvcHkgYWxsIHNwZWNpYWwgdGFibGVEcmFnIGNsYXNzZXMgZnJvbSBvbmUgcm93J3MgZm9ybSBlbGVtZW50cyB0byBhXG4gICAqIGRpZmZlcmVudCBvbmUsIHJlbW92aW5nIGFueSBzcGVjaWFsIGNsYXNzZXMgdGhhdCB0aGUgZGVzdGluYXRpb24gcm93XG4gICAqIG1heSBoYXZlIGhhZC5cbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gc291cmNlUm93XG4gICAqICAgVGhlIGVsZW1lbnQgZm9yIHRoZSBzb3VyY2Ugcm93LlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YXJnZXRSb3dcbiAgICogICBUaGUgZWxlbWVudCBmb3IgdGhlIHRhcmdldCByb3cuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBncm91cFxuICAgKiAgIFRoZSBncm91cCBzZWxlY3Rvci5cbiAgICovXG4gIERydXBhbC50YWJsZURyYWcucHJvdG90eXBlLmNvcHlEcmFnQ2xhc3NlcyA9IGZ1bmN0aW9uIChzb3VyY2VSb3csIHRhcmdldFJvdywgZ3JvdXApIHtcbiAgICBjb25zdCBzb3VyY2VFbGVtZW50ID0gJChzb3VyY2VSb3cpLmZpbmQoYC4ke2dyb3VwfWApO1xuICAgIGNvbnN0IHRhcmdldEVsZW1lbnQgPSAkKHRhcmdldFJvdykuZmluZChgLiR7Z3JvdXB9YCk7XG4gICAgaWYgKHNvdXJjZUVsZW1lbnQubGVuZ3RoICYmIHRhcmdldEVsZW1lbnQubGVuZ3RoKSB7XG4gICAgICB0YXJnZXRFbGVtZW50WzBdLmNsYXNzTmFtZSA9IHNvdXJjZUVsZW1lbnRbMF0uY2xhc3NOYW1lO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQ2hlY2sgdGhlIHN1Z2dlc3RlZCBzY3JvbGwgb2YgdGhlIHRhYmxlLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gY3Vyc29yWVxuICAgKiAgIFRoZSBZIHBvc2l0aW9uIG9mIHRoZSBjdXJzb3IuXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogICBUaGUgc3VnZ2VzdGVkIHNjcm9sbC5cbiAgICovXG4gIERydXBhbC50YWJsZURyYWcucHJvdG90eXBlLmNoZWNrU2Nyb2xsID0gZnVuY3Rpb24gKGN1cnNvclkpIHtcbiAgICBjb25zdCBkZSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICBjb25zdCBiID0gZG9jdW1lbnQuYm9keTtcblxuICAgIGNvbnN0IHdpbmRvd0hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCB8fCAoZGUuY2xpZW50SGVpZ2h0ICYmIGRlLmNsaWVudFdpZHRoICE9PSAwID8gZGUuY2xpZW50SGVpZ2h0IDogYi5vZmZzZXRIZWlnaHQpO1xuICAgIHRoaXMud2luZG93SGVpZ2h0ID0gd2luZG93SGVpZ2h0O1xuICAgIGxldCBzY3JvbGxZO1xuICAgIGlmIChkb2N1bWVudC5hbGwpIHtcbiAgICAgIHNjcm9sbFkgPSAhZGUuc2Nyb2xsVG9wID8gYi5zY3JvbGxUb3AgOiBkZS5zY3JvbGxUb3A7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgc2Nyb2xsWSA9IHdpbmRvdy5wYWdlWU9mZnNldCA/IHdpbmRvdy5wYWdlWU9mZnNldCA6IHdpbmRvdy5zY3JvbGxZO1xuICAgIH1cbiAgICB0aGlzLnNjcm9sbFkgPSBzY3JvbGxZO1xuICAgIGNvbnN0IHRyaWdnZXIgPSB0aGlzLnNjcm9sbFNldHRpbmdzLnRyaWdnZXI7XG4gICAgbGV0IGRlbHRhID0gMDtcblxuICAgIC8vIFJldHVybiBhIHNjcm9sbCBzcGVlZCByZWxhdGl2ZSB0byB0aGUgZWRnZSBvZiB0aGUgc2NyZWVuLlxuICAgIGlmIChjdXJzb3JZIC0gc2Nyb2xsWSA+IHdpbmRvd0hlaWdodCAtIHRyaWdnZXIpIHtcbiAgICAgIGRlbHRhID0gdHJpZ2dlciAvICgod2luZG93SGVpZ2h0ICsgc2Nyb2xsWSkgLSBjdXJzb3JZKTtcbiAgICAgIGRlbHRhID0gKGRlbHRhID4gMCAmJiBkZWx0YSA8IHRyaWdnZXIpID8gZGVsdGEgOiB0cmlnZ2VyO1xuICAgICAgcmV0dXJuIGRlbHRhICogdGhpcy5zY3JvbGxTZXR0aW5ncy5hbW91bnQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKGN1cnNvclkgLSBzY3JvbGxZIDwgdHJpZ2dlcikge1xuICAgICAgZGVsdGEgPSB0cmlnZ2VyIC8gKGN1cnNvclkgLSBzY3JvbGxZKTtcbiAgICAgIGRlbHRhID0gKGRlbHRhID4gMCAmJiBkZWx0YSA8IHRyaWdnZXIpID8gZGVsdGEgOiB0cmlnZ2VyO1xuICAgICAgcmV0dXJuIC1kZWx0YSAqIHRoaXMuc2Nyb2xsU2V0dGluZ3MuYW1vdW50O1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogU2V0IHRoZSBzY3JvbGwgZm9yIHRoZSB0YWJsZS5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNjcm9sbEFtb3VudFxuICAgKiAgIFRoZSBhbW91bnQgb2Ygc2Nyb2xsIHRvIGFwcGx5IHRvIHRoZSB3aW5kb3cuXG4gICAqL1xuICBEcnVwYWwudGFibGVEcmFnLnByb3RvdHlwZS5zZXRTY3JvbGwgPSBmdW5jdGlvbiAoc2Nyb2xsQW1vdW50KSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICB0aGlzLnNjcm9sbEludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgLy8gVXBkYXRlIHRoZSBzY3JvbGwgdmFsdWVzIHN0b3JlZCBpbiB0aGUgb2JqZWN0LlxuICAgICAgc2VsZi5jaGVja1Njcm9sbChzZWxmLmN1cnJlbnRQb2ludGVyQ29vcmRzLnkpO1xuICAgICAgY29uc3QgYWJvdmVUYWJsZSA9IHNlbGYuc2Nyb2xsWSA+IHNlbGYudGFibGUudG9wWTtcbiAgICAgIGNvbnN0IGJlbG93VGFibGUgPSBzZWxmLnNjcm9sbFkgKyBzZWxmLndpbmRvd0hlaWdodCA8IHNlbGYudGFibGUuYm90dG9tWTtcbiAgICAgIGlmICgoc2Nyb2xsQW1vdW50ID4gMCAmJiBiZWxvd1RhYmxlKVxuICAgICAgICB8fCAoc2Nyb2xsQW1vdW50IDwgMCAmJiBhYm92ZVRhYmxlKSkge1xuICAgICAgICB3aW5kb3cuc2Nyb2xsQnkoMCwgc2Nyb2xsQW1vdW50KTtcbiAgICAgIH1cbiAgICB9LCB0aGlzLnNjcm9sbFNldHRpbmdzLmludGVydmFsKTtcbiAgfTtcblxuICAvKipcbiAgICogQ29tbWFuZCB0byByZXN0cmlwZSB0YWJsZSBwcm9wZXJseS5cbiAgICovXG4gIERydXBhbC50YWJsZURyYWcucHJvdG90eXBlLnJlc3RyaXBlVGFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gOmV2ZW4gYW5kIDpvZGQgYXJlIHJldmVyc2VkIGJlY2F1c2UgalF1ZXJ5IGNvdW50cyBmcm9tIDAgYW5kXG4gICAgLy8gd2UgY291bnQgZnJvbSAxLCBzbyB3ZSdyZSBvdXQgb2Ygc3luYy5cbiAgICAvLyBNYXRjaCBpbW1lZGlhdGUgY2hpbGRyZW4gb2YgdGhlIHBhcmVudCBlbGVtZW50IHRvIGFsbG93IG5lc3RpbmcuXG4gICAgJCh0aGlzLnRhYmxlKVxuICAgICAgLmZpbmQoJz4gdGJvZHkgPiB0ci5kcmFnZ2FibGUsID4gdHIuZHJhZ2dhYmxlJylcbiAgICAgIC5maWx0ZXIoJzp2aXNpYmxlJylcbiAgICAgIC5maWx0ZXIoJzpvZGQnKVxuICAgICAgLnJlbW92ZUNsYXNzKCdvZGQnKVxuICAgICAgLmFkZENsYXNzKCdldmVuJylcbiAgICAgIC5lbmQoKVxuICAgICAgLmZpbHRlcignOmV2ZW4nKVxuICAgICAgLnJlbW92ZUNsYXNzKCdldmVuJylcbiAgICAgIC5hZGRDbGFzcygnb2RkJyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFN0dWIgZnVuY3Rpb24uIEFsbG93cyBhIGN1c3RvbSBoYW5kbGVyIHdoZW4gYSByb3cgYmVnaW5zIGRyYWdnaW5nLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudWxsfVxuICAgKiAgIFJldHVybnMgbnVsbCB3aGVuIHRoZSBzdHViIGZ1bmN0aW9uIGlzIHVzZWQuXG4gICAqL1xuICBEcnVwYWwudGFibGVEcmFnLnByb3RvdHlwZS5vbkRyYWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgLyoqXG4gICAqIFN0dWIgZnVuY3Rpb24uIEFsbG93cyBhIGN1c3RvbSBoYW5kbGVyIHdoZW4gYSByb3cgaXMgZHJvcHBlZC5cbiAgICpcbiAgICogQHJldHVybiB7bnVsbH1cbiAgICogICBSZXR1cm5zIG51bGwgd2hlbiB0aGUgc3R1YiBmdW5jdGlvbiBpcyB1c2VkLlxuICAgKi9cbiAgRHJ1cGFsLnRhYmxlRHJhZy5wcm90b3R5cGUub25Ecm9wID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvciB0byBtYWtlIGEgbmV3IG9iamVjdCB0byBtYW5pcHVsYXRlIGEgdGFibGUgcm93LlxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YWJsZVJvd1xuICAgKiAgIFRoZSBET00gZWxlbWVudCBmb3IgdGhlIHRhYmxlIHJvdyB3ZSB3aWxsIGJlIG1hbmlwdWxhdGluZy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZFxuICAgKiAgIFRoZSBtZXRob2QgaW4gd2hpY2ggdGhpcyByb3cgaXMgYmVpbmcgbW92ZWQuIEVpdGhlciAna2V5Ym9hcmQnIG9yXG4gICAqICAgJ21vdXNlJy5cbiAgICogQHBhcmFtIHtib29sfSBpbmRlbnRFbmFibGVkXG4gICAqICAgV2hldGhlciB0aGUgY29udGFpbmluZyB0YWJsZSB1c2VzIGluZGVudGF0aW9ucy4gVXNlZCBmb3Igb3B0aW1pemF0aW9ucy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG1heERlcHRoXG4gICAqICAgVGhlIG1heGltdW0gYW1vdW50IG9mIGluZGVudGF0aW9ucyB0aGlzIHJvdyBtYXkgY29udGFpbi5cbiAgICogQHBhcmFtIHtib29sfSBhZGRDbGFzc2VzXG4gICAqICAgV2hldGhlciB3ZSB3YW50IHRvIGFkZCBjbGFzc2VzIHRvIHRoaXMgcm93IHRvIGluZGljYXRlIGNoaWxkXG4gICAqICAgcmVsYXRpb25zaGlwcy5cbiAgICovXG4gIERydXBhbC50YWJsZURyYWcucHJvdG90eXBlLnJvdyA9IGZ1bmN0aW9uICh0YWJsZVJvdywgbWV0aG9kLCBpbmRlbnRFbmFibGVkLCBtYXhEZXB0aCwgYWRkQ2xhc3Nlcykge1xuICAgIGNvbnN0ICR0YWJsZVJvdyA9ICQodGFibGVSb3cpO1xuXG4gICAgdGhpcy5lbGVtZW50ID0gdGFibGVSb3c7XG4gICAgdGhpcy5tZXRob2QgPSBtZXRob2Q7XG4gICAgdGhpcy5ncm91cCA9IFt0YWJsZVJvd107XG4gICAgdGhpcy5ncm91cERlcHRoID0gJHRhYmxlUm93LmZpbmQoJy5qcy1pbmRlbnRhdGlvbicpLmxlbmd0aDtcbiAgICB0aGlzLmNoYW5nZWQgPSBmYWxzZTtcbiAgICB0aGlzLnRhYmxlID0gJHRhYmxlUm93LmNsb3Nlc3QoJ3RhYmxlJylbMF07XG4gICAgdGhpcy5pbmRlbnRFbmFibGVkID0gaW5kZW50RW5hYmxlZDtcbiAgICB0aGlzLm1heERlcHRoID0gbWF4RGVwdGg7XG4gICAgLy8gRGlyZWN0aW9uIHRoZSByb3cgaXMgYmVpbmcgbW92ZWQuXG4gICAgdGhpcy5kaXJlY3Rpb24gPSAnJztcbiAgICBpZiAodGhpcy5pbmRlbnRFbmFibGVkKSB7XG4gICAgICB0aGlzLmluZGVudHMgPSAkdGFibGVSb3cuZmluZCgnLmpzLWluZGVudGF0aW9uJykubGVuZ3RoO1xuICAgICAgdGhpcy5jaGlsZHJlbiA9IHRoaXMuZmluZENoaWxkcmVuKGFkZENsYXNzZXMpO1xuICAgICAgdGhpcy5ncm91cCA9ICQubWVyZ2UodGhpcy5ncm91cCwgdGhpcy5jaGlsZHJlbik7XG4gICAgICAvLyBGaW5kIHRoZSBkZXB0aCBvZiB0aGlzIGVudGlyZSBncm91cC5cbiAgICAgIGZvciAobGV0IG4gPSAwOyBuIDwgdGhpcy5ncm91cC5sZW5ndGg7IG4rKykge1xuICAgICAgICB0aGlzLmdyb3VwRGVwdGggPSBNYXRoLm1heCgkKHRoaXMuZ3JvdXBbbl0pLmZpbmQoJy5qcy1pbmRlbnRhdGlvbicpLmxlbmd0aCwgdGhpcy5ncm91cERlcHRoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEZpbmQgYWxsIGNoaWxkcmVuIG9mIHJvd09iamVjdCBieSBpbmRlbnRhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtib29sfSBhZGRDbGFzc2VzXG4gICAqICAgV2hldGhlciB3ZSB3YW50IHRvIGFkZCBjbGFzc2VzIHRvIHRoaXMgcm93IHRvIGluZGljYXRlIGNoaWxkXG4gICAqICAgcmVsYXRpb25zaGlwcy5cbiAgICpcbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqICAgQW4gYXJyYXkgb2YgY2hpbGRyZW4gb2YgdGhlIHJvdy5cbiAgICovXG4gIERydXBhbC50YWJsZURyYWcucHJvdG90eXBlLnJvdy5wcm90b3R5cGUuZmluZENoaWxkcmVuID0gZnVuY3Rpb24gKGFkZENsYXNzZXMpIHtcbiAgICBjb25zdCBwYXJlbnRJbmRlbnRhdGlvbiA9IHRoaXMuaW5kZW50cztcbiAgICBsZXQgY3VycmVudFJvdyA9ICQodGhpcy5lbGVtZW50LCB0aGlzLnRhYmxlKS5uZXh0KCd0ci5kcmFnZ2FibGUnKTtcbiAgICBjb25zdCByb3dzID0gW107XG4gICAgbGV0IGNoaWxkID0gMDtcblxuICAgIGZ1bmN0aW9uIHJvd0luZGVudGF0aW9uKGluZGVudE51bSwgZWwpIHtcbiAgICAgIGNvbnN0IHNlbGYgPSAkKGVsKTtcbiAgICAgIGlmIChjaGlsZCA9PT0gMSAmJiAoaW5kZW50TnVtID09PSBwYXJlbnRJbmRlbnRhdGlvbikpIHtcbiAgICAgICAgc2VsZi5hZGRDbGFzcygndHJlZS1jaGlsZC1maXJzdCcpO1xuICAgICAgfVxuICAgICAgaWYgKGluZGVudE51bSA9PT0gcGFyZW50SW5kZW50YXRpb24pIHtcbiAgICAgICAgc2VsZi5hZGRDbGFzcygndHJlZS1jaGlsZCcpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoaW5kZW50TnVtID4gcGFyZW50SW5kZW50YXRpb24pIHtcbiAgICAgICAgc2VsZi5hZGRDbGFzcygndHJlZS1jaGlsZC1ob3Jpem9udGFsJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgd2hpbGUgKGN1cnJlbnRSb3cubGVuZ3RoKSB7XG4gICAgICAvLyBBIGdyZWF0ZXIgaW5kZW50YXRpb24gaW5kaWNhdGVzIHRoaXMgaXMgYSBjaGlsZC5cbiAgICAgIGlmIChjdXJyZW50Um93LmZpbmQoJy5qcy1pbmRlbnRhdGlvbicpLmxlbmd0aCA+IHBhcmVudEluZGVudGF0aW9uKSB7XG4gICAgICAgIGNoaWxkKys7XG4gICAgICAgIHJvd3MucHVzaChjdXJyZW50Um93WzBdKTtcbiAgICAgICAgaWYgKGFkZENsYXNzZXMpIHtcbiAgICAgICAgICBjdXJyZW50Um93LmZpbmQoJy5qcy1pbmRlbnRhdGlvbicpLmVhY2gocm93SW5kZW50YXRpb24pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjdXJyZW50Um93ID0gY3VycmVudFJvdy5uZXh0KCd0ci5kcmFnZ2FibGUnKTtcbiAgICB9XG4gICAgaWYgKGFkZENsYXNzZXMgJiYgcm93cy5sZW5ndGgpIHtcbiAgICAgICQocm93c1tyb3dzLmxlbmd0aCAtIDFdKS5maW5kKGAuanMtaW5kZW50YXRpb246bnRoLWNoaWxkKCR7cGFyZW50SW5kZW50YXRpb24gKyAxfSlgKS5hZGRDbGFzcygndHJlZS1jaGlsZC1sYXN0Jyk7XG4gICAgfVxuICAgIHJldHVybiByb3dzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBFbnN1cmUgdGhhdCB0d28gcm93cyBhcmUgYWxsb3dlZCB0byBiZSBzd2FwcGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByb3dcbiAgICogICBET00gb2JqZWN0IGZvciB0aGUgcm93IGJlaW5nIGNvbnNpZGVyZWQgZm9yIHN3YXBwaW5nLlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sfVxuICAgKiAgIFdoZXRoZXIgdGhlIHN3YXAgaXMgYSB2YWxpZCBzd2FwIG9yIG5vdC5cbiAgICovXG4gIERydXBhbC50YWJsZURyYWcucHJvdG90eXBlLnJvdy5wcm90b3R5cGUuaXNWYWxpZFN3YXAgPSBmdW5jdGlvbiAocm93KSB7XG4gICAgY29uc3QgJHJvdyA9ICQocm93KTtcbiAgICBpZiAodGhpcy5pbmRlbnRFbmFibGVkKSB7XG4gICAgICBsZXQgcHJldlJvdztcbiAgICAgIGxldCBuZXh0Um93O1xuICAgICAgaWYgKHRoaXMuZGlyZWN0aW9uID09PSAnZG93bicpIHtcbiAgICAgICAgcHJldlJvdyA9IHJvdztcbiAgICAgICAgbmV4dFJvdyA9ICRyb3cubmV4dCgndHInKS5nZXQoMCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcHJldlJvdyA9ICRyb3cucHJldigndHInKS5nZXQoMCk7XG4gICAgICAgIG5leHRSb3cgPSByb3c7XG4gICAgICB9XG4gICAgICB0aGlzLmludGVydmFsID0gdGhpcy52YWxpZEluZGVudEludGVydmFsKHByZXZSb3csIG5leHRSb3cpO1xuXG4gICAgICAvLyBXZSBoYXZlIGFuIGludmFsaWQgc3dhcCBpZiB0aGUgdmFsaWQgaW5kZW50YXRpb25zIGludGVydmFsIGlzIGVtcHR5LlxuICAgICAgaWYgKHRoaXMuaW50ZXJ2YWwubWluID4gdGhpcy5pbnRlcnZhbC5tYXgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIERvIG5vdCBsZXQgYW4gdW4tZHJhZ2dhYmxlIGZpcnN0IHJvdyBoYXZlIGFueXRoaW5nIHB1dCBiZWZvcmUgaXQuXG4gICAgaWYgKHRoaXMudGFibGUudEJvZGllc1swXS5yb3dzWzBdID09PSByb3cgJiYgJHJvdy5pcygnOm5vdCguZHJhZ2dhYmxlKScpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gdGhlIHN3YXAgYmV0d2VlbiB0d28gcm93cy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBvc2l0aW9uXG4gICAqICAgV2hldGhlciB0aGUgc3dhcCB3aWxsIG9jY3VyICdiZWZvcmUnIG9yICdhZnRlcicgdGhlIGdpdmVuIHJvdy5cbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcm93XG4gICAqICAgRE9NIGVsZW1lbnQgd2hhdCB3aWxsIGJlIHN3YXBwZWQgd2l0aCB0aGUgcm93IGdyb3VwLlxuICAgKi9cbiAgRHJ1cGFsLnRhYmxlRHJhZy5wcm90b3R5cGUucm93LnByb3RvdHlwZS5zd2FwID0gZnVuY3Rpb24gKHBvc2l0aW9uLCByb3cpIHtcbiAgICAvLyBNYWtlcyBzdXJlIG9ubHkgRE9NIG9iamVjdCBhcmUgcGFzc2VkIHRvIERydXBhbC5kZXRhY2hCZWhhdmlvcnMoKS5cbiAgICB0aGlzLmdyb3VwLmZvckVhY2goKHJvdykgPT4ge1xuICAgICAgRHJ1cGFsLmRldGFjaEJlaGF2aW9ycyhyb3csIGRydXBhbFNldHRpbmdzLCAnbW92ZScpO1xuICAgIH0pO1xuICAgICQocm93KVtwb3NpdGlvbl0odGhpcy5ncm91cCk7XG4gICAgLy8gTWFrZXMgc3VyZSBvbmx5IERPTSBvYmplY3QgYXJlIHBhc3NlZCB0byBEcnVwYWwuYXR0YWNoQmVoYXZpb3JzKClzLlxuICAgIHRoaXMuZ3JvdXAuZm9yRWFjaCgocm93KSA9PiB7XG4gICAgICBEcnVwYWwuYXR0YWNoQmVoYXZpb3JzKHJvdywgZHJ1cGFsU2V0dGluZ3MpO1xuICAgIH0pO1xuICAgIHRoaXMuY2hhbmdlZCA9IHRydWU7XG4gICAgdGhpcy5vblN3YXAocm93KTtcbiAgfTtcblxuICAvKipcbiAgICogRGV0ZXJtaW5lIHRoZSB2YWxpZCBpbmRlbnRhdGlvbnMgaW50ZXJ2YWwgZm9yIHRoZSByb3cgYXQgYSBnaXZlbiBwb3NpdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHs/SFRNTEVsZW1lbnR9IHByZXZSb3dcbiAgICogICBET00gb2JqZWN0IGZvciB0aGUgcm93IGJlZm9yZSB0aGUgdGVzdGVkIHBvc2l0aW9uXG4gICAqICAgKG9yIG51bGwgZm9yIGZpcnN0IHBvc2l0aW9uIGluIHRoZSB0YWJsZSkuXG4gICAqIEBwYXJhbSB7P0hUTUxFbGVtZW50fSBuZXh0Um93XG4gICAqICAgRE9NIG9iamVjdCBmb3IgdGhlIHJvdyBhZnRlciB0aGUgdGVzdGVkIHBvc2l0aW9uXG4gICAqICAgKG9yIG51bGwgZm9yIGxhc3QgcG9zaXRpb24gaW4gdGhlIHRhYmxlKS5cbiAgICpcbiAgICogQHJldHVybiB7b2JqZWN0fVxuICAgKiAgIEFuIG9iamVjdCB3aXRoIHRoZSBrZXlzIGBtaW5gIGFuZCBgbWF4YCB0byBpbmRpY2F0ZSB0aGUgdmFsaWQgaW5kZW50XG4gICAqICAgaW50ZXJ2YWwuXG4gICAqL1xuICBEcnVwYWwudGFibGVEcmFnLnByb3RvdHlwZS5yb3cucHJvdG90eXBlLnZhbGlkSW5kZW50SW50ZXJ2YWwgPSBmdW5jdGlvbiAocHJldlJvdywgbmV4dFJvdykge1xuICAgIGNvbnN0ICRwcmV2Um93ID0gJChwcmV2Um93KTtcbiAgICBsZXQgbWF4SW5kZW50O1xuXG4gICAgLy8gTWluaW11bSBpbmRlbnRhdGlvbjpcbiAgICAvLyBEbyBub3Qgb3JwaGFuIHRoZSBuZXh0IHJvdy5cbiAgICBjb25zdCBtaW5JbmRlbnQgPSBuZXh0Um93ID8gJChuZXh0Um93KS5maW5kKCcuanMtaW5kZW50YXRpb24nKS5sZW5ndGggOiAwO1xuXG4gICAgLy8gTWF4aW11bSBpbmRlbnRhdGlvbjpcbiAgICBpZiAoIXByZXZSb3cgfHwgJHByZXZSb3cuaXMoJzpub3QoLmRyYWdnYWJsZSknKSB8fCAkKHRoaXMuZWxlbWVudCkuaXMoJy50YWJsZWRyYWctcm9vdCcpKSB7XG4gICAgICAvLyBEbyBub3QgaW5kZW50OlxuICAgICAgLy8gLSB0aGUgZmlyc3Qgcm93IGluIHRoZSB0YWJsZSxcbiAgICAgIC8vIC0gcm93cyBkcmFnZ2VkIGJlbG93IGEgbm9uLWRyYWdnYWJsZSByb3csXG4gICAgICAvLyAtICdyb290JyByb3dzLlxuICAgICAgbWF4SW5kZW50ID0gMDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAvLyBEbyBub3QgZ28gZGVlcGVyIHRoYW4gYXMgYSBjaGlsZCBvZiB0aGUgcHJldmlvdXMgcm93LlxuICAgICAgbWF4SW5kZW50ID0gJHByZXZSb3cuZmluZCgnLmpzLWluZGVudGF0aW9uJykubGVuZ3RoICsgKCRwcmV2Um93LmlzKCcudGFibGVkcmFnLWxlYWYnKSA/IDAgOiAxKTtcbiAgICAgIC8vIExpbWl0IGJ5IHRoZSBtYXhpbXVtIGFsbG93ZWQgZGVwdGggZm9yIHRoZSB0YWJsZS5cbiAgICAgIGlmICh0aGlzLm1heERlcHRoKSB7XG4gICAgICAgIG1heEluZGVudCA9IE1hdGgubWluKG1heEluZGVudCwgdGhpcy5tYXhEZXB0aCAtICh0aGlzLmdyb3VwRGVwdGggLSB0aGlzLmluZGVudHMpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4geyBtaW46IG1pbkluZGVudCwgbWF4OiBtYXhJbmRlbnQgfTtcbiAgfTtcblxuICAvKipcbiAgICogSW5kZW50IGEgcm93IHdpdGhpbiB0aGUgbGVnYWwgYm91bmRzIG9mIHRoZSB0YWJsZS5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGVudERpZmZcbiAgICogICBUaGUgbnVtYmVyIG9mIGFkZGl0aW9uYWwgaW5kZW50YXRpb25zIHByb3Bvc2VkIGZvciB0aGUgcm93IChjYW4gYmVcbiAgICogICBwb3NpdGl2ZSBvciBuZWdhdGl2ZSkuIFRoaXMgbnVtYmVyIHdpbGwgYmUgYWRqdXN0ZWQgdG8gbmVhcmVzdCB2YWxpZFxuICAgKiAgIGluZGVudGF0aW9uIGxldmVsIGZvciB0aGUgcm93LlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqICAgVGhlIG51bWJlciBvZiBpbmRlbnRhdGlvbnMgYXBwbGllZC5cbiAgICovXG4gIERydXBhbC50YWJsZURyYWcucHJvdG90eXBlLnJvdy5wcm90b3R5cGUuaW5kZW50ID0gZnVuY3Rpb24gKGluZGVudERpZmYpIHtcbiAgICBjb25zdCAkZ3JvdXAgPSAkKHRoaXMuZ3JvdXApO1xuICAgIC8vIERldGVybWluZSB0aGUgdmFsaWQgaW5kZW50YXRpb25zIGludGVydmFsIGlmIG5vdCBhdmFpbGFibGUgeWV0LlxuICAgIGlmICghdGhpcy5pbnRlcnZhbCkge1xuICAgICAgY29uc3QgcHJldlJvdyA9ICQodGhpcy5lbGVtZW50KS5wcmV2KCd0cicpLmdldCgwKTtcbiAgICAgIGNvbnN0IG5leHRSb3cgPSAkZ3JvdXAuZXEoLTEpLm5leHQoJ3RyJykuZ2V0KDApO1xuICAgICAgdGhpcy5pbnRlcnZhbCA9IHRoaXMudmFsaWRJbmRlbnRJbnRlcnZhbChwcmV2Um93LCBuZXh0Um93KTtcbiAgICB9XG5cbiAgICAvLyBBZGp1c3QgdG8gdGhlIG5lYXJlc3QgdmFsaWQgaW5kZW50YXRpb24uXG4gICAgbGV0IGluZGVudCA9IHRoaXMuaW5kZW50cyArIGluZGVudERpZmY7XG4gICAgaW5kZW50ID0gTWF0aC5tYXgoaW5kZW50LCB0aGlzLmludGVydmFsLm1pbik7XG4gICAgaW5kZW50ID0gTWF0aC5taW4oaW5kZW50LCB0aGlzLmludGVydmFsLm1heCk7XG4gICAgaW5kZW50RGlmZiA9IGluZGVudCAtIHRoaXMuaW5kZW50cztcblxuICAgIGZvciAobGV0IG4gPSAxOyBuIDw9IE1hdGguYWJzKGluZGVudERpZmYpOyBuKyspIHtcbiAgICAgIC8vIEFkZCBvciByZW1vdmUgaW5kZW50YXRpb25zLlxuICAgICAgaWYgKGluZGVudERpZmYgPCAwKSB7XG4gICAgICAgICRncm91cC5maW5kKCcuanMtaW5kZW50YXRpb246Zmlyc3Qtb2YtdHlwZScpLnJlbW92ZSgpO1xuICAgICAgICB0aGlzLmluZGVudHMtLTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAkZ3JvdXAuZmluZCgndGQ6Zmlyc3Qtb2YtdHlwZScpLnByZXBlbmQoRHJ1cGFsLnRoZW1lKCd0YWJsZURyYWdJbmRlbnRhdGlvbicpKTtcbiAgICAgICAgdGhpcy5pbmRlbnRzKys7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpbmRlbnREaWZmKSB7XG4gICAgICAvLyBVcGRhdGUgaW5kZW50YXRpb24gZm9yIHRoaXMgcm93LlxuICAgICAgdGhpcy5jaGFuZ2VkID0gdHJ1ZTtcbiAgICAgIHRoaXMuZ3JvdXBEZXB0aCArPSBpbmRlbnREaWZmO1xuICAgICAgdGhpcy5vbkluZGVudCgpO1xuICAgIH1cblxuICAgIHJldHVybiBpbmRlbnREaWZmO1xuICB9O1xuXG4gIC8qKlxuICAgKiBGaW5kIGFsbCBzaWJsaW5ncyBmb3IgYSByb3cuXG4gICAqXG4gICAqIEFjY29yZGluZyB0byBpdHMgc3ViZ3JvdXAgb3IgaW5kZW50YXRpb24uIE5vdGUgdGhhdCB0aGUgcGFzc2VkLWluIHJvdyBpc1xuICAgKiBpbmNsdWRlZCBpbiB0aGUgbGlzdCBvZiBzaWJsaW5ncy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHJvd1NldHRpbmdzXG4gICAqICAgVGhlIGZpZWxkIHNldHRpbmdzIHdlJ3JlIHVzaW5nIHRvIGlkZW50aWZ5IHdoYXQgY29uc3RpdHV0ZXMgYSBzaWJsaW5nLlxuICAgKlxuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICogICBBbiBhcnJheSBvZiBzaWJsaW5ncy5cbiAgICovXG4gIERydXBhbC50YWJsZURyYWcucHJvdG90eXBlLnJvdy5wcm90b3R5cGUuZmluZFNpYmxpbmdzID0gZnVuY3Rpb24gKHJvd1NldHRpbmdzKSB7XG4gICAgY29uc3Qgc2libGluZ3MgPSBbXTtcbiAgICBjb25zdCBkaXJlY3Rpb25zID0gWydwcmV2JywgJ25leHQnXTtcbiAgICBjb25zdCByb3dJbmRlbnRhdGlvbiA9IHRoaXMuaW5kZW50cztcbiAgICBsZXQgY2hlY2tSb3dJbmRlbnRhdGlvbjtcbiAgICBmb3IgKGxldCBkID0gMDsgZCA8IGRpcmVjdGlvbnMubGVuZ3RoOyBkKyspIHtcbiAgICAgIGxldCBjaGVja1JvdyA9ICQodGhpcy5lbGVtZW50KVtkaXJlY3Rpb25zW2RdXSgpO1xuICAgICAgd2hpbGUgKGNoZWNrUm93Lmxlbmd0aCkge1xuICAgICAgICAvLyBDaGVjayB0aGF0IHRoZSBzaWJsaW5nIGNvbnRhaW5zIGEgc2ltaWxhciB0YXJnZXQgZmllbGQuXG4gICAgICAgIGlmIChjaGVja1Jvdy5maW5kKGAuJHtyb3dTZXR0aW5ncy50YXJnZXR9YCkpIHtcbiAgICAgICAgICAvLyBFaXRoZXIgYWRkIGltbWVkaWF0ZWx5IGlmIHRoaXMgaXMgYSBmbGF0IHRhYmxlLCBvciBjaGVjayB0byBlbnN1cmVcbiAgICAgICAgICAvLyB0aGF0IHRoaXMgcm93IGhhcyB0aGUgc2FtZSBsZXZlbCBvZiBpbmRlbnRhdGlvbi5cbiAgICAgICAgICBpZiAodGhpcy5pbmRlbnRFbmFibGVkKSB7XG4gICAgICAgICAgICBjaGVja1Jvd0luZGVudGF0aW9uID0gY2hlY2tSb3cuZmluZCgnLmpzLWluZGVudGF0aW9uJykubGVuZ3RoO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghKHRoaXMuaW5kZW50RW5hYmxlZCkgfHwgKGNoZWNrUm93SW5kZW50YXRpb24gPT09IHJvd0luZGVudGF0aW9uKSkge1xuICAgICAgICAgICAgc2libGluZ3MucHVzaChjaGVja1Jvd1swXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGNoZWNrUm93SW5kZW50YXRpb24gPCByb3dJbmRlbnRhdGlvbikge1xuICAgICAgICAgICAgLy8gTm8gbmVlZCB0byBrZWVwIGxvb2tpbmcgZm9yIHNpYmxpbmdzIHdoZW4gd2UgZ2V0IHRvIGEgcGFyZW50LlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNoZWNrUm93ID0gY2hlY2tSb3dbZGlyZWN0aW9uc1tkXV0oKTtcbiAgICAgIH1cbiAgICAgIC8vIFNpbmNlIHNpYmxpbmdzIGFyZSBhZGRlZCBpbiByZXZlcnNlIG9yZGVyIGZvciBwcmV2aW91cywgcmV2ZXJzZSB0aGVcbiAgICAgIC8vIGNvbXBsZXRlZCBsaXN0IG9mIHByZXZpb3VzIHNpYmxpbmdzLiBBZGQgdGhlIGN1cnJlbnQgcm93IGFuZCBjb250aW51ZS5cbiAgICAgIGlmIChkaXJlY3Rpb25zW2RdID09PSAncHJldicpIHtcbiAgICAgICAgc2libGluZ3MucmV2ZXJzZSgpO1xuICAgICAgICBzaWJsaW5ncy5wdXNoKHRoaXMuZWxlbWVudCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzaWJsaW5ncztcbiAgfTtcblxuICAvKipcbiAgICogUmVtb3ZlIGluZGVudGF0aW9uIGhlbHBlciBjbGFzc2VzIGZyb20gdGhlIGN1cnJlbnQgcm93IGdyb3VwLlxuICAgKi9cbiAgRHJ1cGFsLnRhYmxlRHJhZy5wcm90b3R5cGUucm93LnByb3RvdHlwZS5yZW1vdmVJbmRlbnRDbGFzc2VzID0gZnVuY3Rpb24gKCkge1xuICAgIE9iamVjdC5rZXlzKHRoaXMuY2hpbGRyZW4gfHwge30pLmZvckVhY2goKG4pID0+IHtcbiAgICAgICQodGhpcy5jaGlsZHJlbltuXSkuZmluZCgnLmpzLWluZGVudGF0aW9uJylcbiAgICAgICAgLnJlbW92ZUNsYXNzKCd0cmVlLWNoaWxkJylcbiAgICAgICAgLnJlbW92ZUNsYXNzKCd0cmVlLWNoaWxkLWZpcnN0JylcbiAgICAgICAgLnJlbW92ZUNsYXNzKCd0cmVlLWNoaWxkLWxhc3QnKVxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ3RyZWUtY2hpbGQtaG9yaXpvbnRhbCcpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBZGQgYW4gYXN0ZXJpc2sgb3Igb3RoZXIgbWFya2VyIHRvIHRoZSBjaGFuZ2VkIHJvdy5cbiAgICovXG4gIERydXBhbC50YWJsZURyYWcucHJvdG90eXBlLnJvdy5wcm90b3R5cGUubWFya0NoYW5nZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgbWFya2VyID0gRHJ1cGFsLnRoZW1lKCd0YWJsZURyYWdDaGFuZ2VkTWFya2VyJyk7XG4gICAgY29uc3QgY2VsbCA9ICQodGhpcy5lbGVtZW50KS5maW5kKCd0ZDpmaXJzdC1vZi10eXBlJyk7XG4gICAgaWYgKGNlbGwuZmluZCgnYWJici50YWJsZWRyYWctY2hhbmdlZCcpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY2VsbC5hcHBlbmQobWFya2VyKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFN0dWIgZnVuY3Rpb24uIEFsbG93cyBhIGN1c3RvbSBoYW5kbGVyIHdoZW4gYSByb3cgaXMgaW5kZW50ZWQuXG4gICAqXG4gICAqIEByZXR1cm4ge251bGx9XG4gICAqICAgUmV0dXJucyBudWxsIHdoZW4gdGhlIHN0dWIgZnVuY3Rpb24gaXMgdXNlZC5cbiAgICovXG4gIERydXBhbC50YWJsZURyYWcucHJvdG90eXBlLnJvdy5wcm90b3R5cGUub25JbmRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgLyoqXG4gICAqIFN0dWIgZnVuY3Rpb24uIEFsbG93cyBhIGN1c3RvbSBoYW5kbGVyIHdoZW4gYSByb3cgaXMgc3dhcHBlZC5cbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gc3dhcHBlZFJvd1xuICAgKiAgIFRoZSBlbGVtZW50IGZvciB0aGUgc3dhcHBlZCByb3cuXG4gICAqXG4gICAqIEByZXR1cm4ge251bGx9XG4gICAqICAgUmV0dXJucyBudWxsIHdoZW4gdGhlIHN0dWIgZnVuY3Rpb24gaXMgdXNlZC5cbiAgICovXG4gIERydXBhbC50YWJsZURyYWcucHJvdG90eXBlLnJvdy5wcm90b3R5cGUub25Td2FwID0gZnVuY3Rpb24gKHN3YXBwZWRSb3cpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICAkLmV4dGVuZChEcnVwYWwudGhlbWUsIC8qKiBAbGVuZHMgRHJ1cGFsLnRoZW1lICove1xuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7c3RyaW5nfVxuICAgICAqICBNYXJrdXAgZm9yIHRoZSBtYXJrZXIuXG4gICAgICovXG4gICAgdGFibGVEcmFnQ2hhbmdlZE1hcmtlcigpIHtcbiAgICAgIHJldHVybiBgPGFiYnIgY2xhc3M9XCJ3YXJuaW5nIHRhYmxlZHJhZy1jaGFuZ2VkXCIgdGl0bGU9XCIke0RydXBhbC50KCdDaGFuZ2VkJyl9XCI+KjwvYWJicj5gO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAgICogICBNYXJrdXAgZm9yIHRoZSBpbmRlbnRhdGlvbi5cbiAgICAgKi9cbiAgICB0YWJsZURyYWdJbmRlbnRhdGlvbigpIHtcbiAgICAgIHJldHVybiAnPGRpdiBjbGFzcz1cImpzLWluZGVudGF0aW9uIGluZGVudGF0aW9uXCI+Jm5ic3A7PC9kaXY+JztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7c3RyaW5nfVxuICAgICAqICAgTWFya3VwIGZvciB0aGUgd2FybmluZy5cbiAgICAgKi9cbiAgICB0YWJsZURyYWdDaGFuZ2VkV2FybmluZygpIHtcbiAgICAgIHJldHVybiBgPGRpdiBjbGFzcz1cInRhYmxlZHJhZy1jaGFuZ2VkLXdhcm5pbmcgbWVzc2FnZXMgbWVzc2FnZXMtLXdhcm5pbmdcIiByb2xlPVwiYWxlcnRcIj4ke0RydXBhbC50aGVtZSgndGFibGVEcmFnQ2hhbmdlZE1hcmtlcicpfSAke0RydXBhbC50KCdZb3UgaGF2ZSB1bnNhdmVkIGNoYW5nZXMuJyl9PC9kaXY+YDtcbiAgICB9LFxuICB9KTtcbn0oalF1ZXJ5LCBEcnVwYWwsIGRydXBhbFNldHRpbmdzKSk7XG4iXX0=