/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function (Drupal) {

  Drupal.message = function () {
    function _class() {
      var messageWrapper = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      _classCallCheck(this, _class);

      this.messageWrapper = messageWrapper;
    }

    _createClass(_class, [{
      key: 'add',
      value: function add(message) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (!this.messageWrapper) {
          this.messageWrapper = Drupal.message.defaultWrapper();
        }
        if (!options.hasOwnProperty('type')) {
          options.type = 'status';
        }

        if (typeof message !== 'string') {
          throw new Error('Message must be a string.');
        }

        Drupal.message.announce(message, options);

        options.id = options.id ? String(options.id) : options.type + '-' + Math.random().toFixed(15).replace('0.', '');

        if (!Drupal.message.getMessageTypeLabels().hasOwnProperty(options.type)) {
          throw new Error('The message type, ' + options.type + ', is not present in Drupal.message.getMessageTypeLabels().');
        }

        this.messageWrapper.appendChild(Drupal.theme('message', { text: message }, options));

        return options.id;
      }
    }, {
      key: 'select',
      value: function select(index) {
        if (!index || Array.isArray(index) && index.length === 0) {
          return [];
        }

        var selectors = (Array.isArray(index) ? index : [index]).map(function (currentIndex) {
          return '[data-drupal-message-id^="' + currentIndex + '"]';
        });

        return this.messageWrapper.querySelectorAll(selectors.join(','));
      }
    }, {
      key: 'removeElements',
      value: function removeElements(elements) {
        if (!elements || !elements.length) {
          return 0;
        }

        var length = elements.length;
        for (var i = 0; i < length; i++) {
          this.messageWrapper.removeChild(elements[i]);
        }
        return length;
      }
    }, {
      key: 'remove',
      value: function remove(ids) {
        var messages = this.select(ids);
        return this.removeElements(messages);
      }
    }, {
      key: 'clear',
      value: function clear() {
        var messages = this.messageWrapper.querySelectorAll('[data-drupal-message-id]');
        return this.removeElements(messages);
      }
    }], [{
      key: 'defaultWrapper',
      value: function defaultWrapper() {
        var wrapper = document.querySelector('[data-drupal-messages]');
        if (!wrapper) {
          wrapper = document.querySelector('[data-drupal-messages-fallback]');
          wrapper.removeAttribute('data-drupal-messages-fallback');
          wrapper.setAttribute('data-drupal-messages', '');
          wrapper.removeAttribute('class');
        }
        return wrapper.innerHTML === '' ? Drupal.message.messageInternalWrapper(wrapper) : wrapper.firstElementChild;
      }
    }, {
      key: 'getMessageTypeLabels',
      value: function getMessageTypeLabels() {
        return {
          status: Drupal.t('Status message'),
          error: Drupal.t('Error message'),
          warning: Drupal.t('Warning message')
        };
      }
    }, {
      key: 'announce',
      value: function announce(message, options) {
        if (!options.priority && (options.type === 'warning' || options.type === 'error')) {
          options.priority = 'assertive';
        }

        if (options.announce !== '') {
          Drupal.announce(options.announce || message, options.priority);
        }
      }
    }, {
      key: 'messageInternalWrapper',
      value: function messageInternalWrapper(messageWrapper) {
        var innerWrapper = document.createElement('div');
        innerWrapper.setAttribute('class', 'messages__wrapper');
        messageWrapper.insertAdjacentElement('afterbegin', innerWrapper);
        return innerWrapper;
      }
    }]);

    return _class;
  }();

  Drupal.theme.message = function (_ref, options) {
    var text = _ref.text;

    var messagesTypes = Drupal.message.getMessageTypeLabels();
    var messageWraper = document.createElement('div');
    var messageText = document.createElement('h2');
    messageText.setAttribute('class', 'visually-hidden');

    messageWraper.setAttribute('class', 'messages messages--' + options.type);
    messageWraper.setAttribute('role', options.type === 'error' ? 'alert' : 'status');
    messageWraper.setAttribute('data-drupal-message-id', options.id);
    messageWraper.setAttribute('data-drupal-message-type', options.type);

    messageWraper.setAttribute('aria-label', messagesTypes[options.type]);
    messageText.innerHTML = messagesTypes[options.type];

    messageWraper.innerHTML = ' ' + text;
    messageWraper.insertAdjacentElement('afterbegin', messageText);

    return messageWraper;
  };
})(Drupal);